{"version":3,"file":"rnode-websocket-client.es.js","sources":["../src/core/logger.ts","../src/core/events.ts","../src/core/types.ts","../src/connection/manager.ts","../src/connection/rooms.ts","../src/connection/messages.ts","../src/connection/pingpong.ts","../src/connection/reconnection.ts","../src/client.ts","../src/utils/websocket.ts","../src/index.ts"],"sourcesContent":["export enum LogLevel {\n  TRACE = 0,\n  DEBUG = 1,\n  INFO = 2,\n  WARN = 3,\n  ERROR = 4\n}\n\nexport class Logger {\n  private level: LogLevel = LogLevel.INFO;\n  private prefix: string = 'rnode-websocket-client';\n\n  constructor(level?: LogLevel, prefix?: string) {\n    if (level !== undefined) this.level = level;\n    if (prefix !== undefined) this.prefix = prefix;\n  }\n\n  setLevel(level: LogLevel): void {\n    this.level = level;\n  }\n\n  private shouldLog(level: LogLevel): boolean {\n    return level >= this.level;\n  }\n\n  private formatMessage(level: string, message: string, context?: string): string {\n    const timestamp = new Date().toISOString();\n    const contextStr = context ? ` [${context}]` : '';\n    return `[${timestamp}] ${level.toUpperCase()} ${this.prefix}${contextStr}: ${message}`;\n  }\n\n  trace(message: string, context?: string): void {\n    if (this.shouldLog(LogLevel.TRACE)) {\n      console.trace(this.formatMessage('TRACE', message, context));\n    }\n  }\n\n  debug(message: string, context?: string): void {\n    if (this.shouldLog(LogLevel.DEBUG)) {\n      console.debug(this.formatMessage('DEBUG', message, context));\n    }\n  }\n\n  info(message: string, context?: string): void {\n    if (this.shouldLog(LogLevel.INFO)) {\n      console.info(this.formatMessage('INFO', message, context));\n    }\n  }\n\n  warn(message: string, context?: string): void {\n    if (this.shouldLog(LogLevel.WARN)) {\n      console.warn(this.formatMessage('WARN', message, context));\n    }\n  }\n\n  error(message: string, context?: string): void {\n    if (this.shouldLog(LogLevel.ERROR)) {\n      console.error(this.formatMessage('ERROR', message, context));\n    }\n  }\n}\n\nexport const logger = new Logger();\n","import { logger } from './logger';\n\nexport type EventListener = (data?: unknown) => void;\n\nexport class EventEmitter {\n  private eventListeners: Map<string, EventListener[]> = new Map();\n\n  /**\n   * Subscribe to events\n   */\n  on(event: string, listener: EventListener): void {\n    if (!this.eventListeners.has(event)) {\n      this.eventListeners.set(event, []);\n    }\n    this.eventListeners.get(event)!.push(listener);\n  }\n\n  /**\n   * Unsubscribe from events\n   */\n  off(event: string, listener: EventListener): void {\n    if (this.eventListeners.has(event)) {\n      const listeners = this.eventListeners.get(event)!;\n      const index = listeners.indexOf(listener);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    }\n  }\n\n  /**\n   * Emit events\n   */\n  protected emit(event: string, data?: unknown): void {\n    if (this.eventListeners.has(event)) {\n      const listeners = this.eventListeners.get(event)!;\n      listeners.forEach(listener => {\n        try {\n          listener(data);\n        } catch (error) {\n          logger.error(`❌ Error in event listener for ${event}: ${error}`, 'events');\n        }\n      });\n    }\n  }\n\n  /**\n   * Clear all event listeners\n   */\n  removeAllListeners(event?: string): void {\n    if (event) {\n      this.eventListeners.delete(event);\n    } else {\n      this.eventListeners.clear();\n    }\n  }\n\n  /**\n   * Get number of listeners for event\n   */\n  listenerCount(event: string): number {\n    return this.eventListeners.get(event)?.length || 0;\n  }\n\n  /**\n   * Get list of all events\n   */\n  eventNames(): string[] {\n    return Array.from(this.eventListeners.keys());\n  }\n}\n","// Main WebSocket types\nexport interface WebSocketOptions {\n  url: string;\n  protocols?: string | string[];\n  clientId?: string;\n  autoReconnect?: boolean;\n  reconnectAttempts?: number;\n  reconnectDelay?: number;\n  pingInterval?: number;\n  pongTimeout?: number;\n  onConnect?: (event: WebSocketEvent) => void;\n  onMessage?: (event: WebSocketEvent) => void;\n  onBinaryMessage?: (event: WebSocketEvent) => void;  // Add binary message handler\n  onDisconnect?: (event: WebSocketEvent) => void;\n  onError?: (event: WebSocketEvent) => void;\n  onWelcome?: (message: WelcomeMessage) => void;\n  onReconnect?: (data: ReconnectEvent) => void;\n  onJoinRoom?: (data: RoomEvent) => void;\n  onLeaveRoom?: (data: RoomEvent) => void;\n  onPing?: (data: PingEvent) => void;\n  onPong?: (data: PongEvent) => void;\n  onMessageAck?: (data: MessageAckEvent) => void;\n  onRoomMessage?: (data: RoomMessageEvent) => void;\n  onDirectMessage?: (data: DirectMessageEvent) => void;\n  onServerError?: (data: ServerErrorEvent) => void;  // Add server error handler\n  onMessageBlocked?: (data: MessageBlockedEvent) => void;  // Add message blocked handler\n}\n\nexport interface WebSocketEvent {\n  type: string;\n  data?: unknown;\n  timestamp: number;\n}\n\nexport interface WebSocketMessage {\n  type: string;\n  connection_id?: string;\n  client_id?: string;\n  path?: string;\n  data?: unknown;\n  timestamp?: string;\n  room_id?: string | null;  // snake_case for server compatibility\n  target_client_id?: string;  // snake_case for server compatibility\n  [key: string]: unknown;\n}\n\n// Specialized message types\nexport interface WelcomeMessage {\n  type: 'welcome';\n  connection_id: string;\n  client_id: string;\n  path: string;\n  timestamp: string;\n}\n\nexport interface RoomInfo {\n  id: string;\n  name: string;\n  description?: string;\n  maxConnections?: number;\n  connections: string[];\n  metadata: Record<string, string>;\n  createdAt: string;\n}\n\nexport interface ConnectionInfo {\n  id: string;\n  clientId: string;\n  path: string;\n  roomId?: string;\n  handlerId: string;\n  metadata: Record<string, string>;\n  createdAt: string;\n  lastPing: string;\n}\n\n// Configuration types\nexport interface ReconnectConfig {\n  enabled: boolean;\n  interval: number;\n  maxAttempts: number;\n  currentAttempt: number;\n}\n\nexport interface PingPongConfig {\n  enabled: boolean;\n  interval: number;\n  timeout: number;\n  lastPing: number;\n  lastPong: number;\n}\n\n// Event types\nexport interface ReconnectEvent {\n  attempt: number;\n  maxAttempts: number;\n  delay: number;\n  timestamp: number;\n}\n\nexport interface RoomEvent {\n  roomId: string;\n  timestamp: number;\n}\n\nexport interface PingEvent {\n  timestamp: number;\n}\n\nexport interface PongEvent {\n  latency: number;\n  timestamp: number;\n}\n\nexport interface MessageAckEvent {\n  message: string;\n  timestamp: string;\n  type: string;\n}\n\nexport interface RoomMessageEvent {\n  message: string;\n  room_id: string;\n  timestamp: string;\n  type: string;\n}\n\nexport interface DirectMessageEvent {\n  message: string;\n  from_client_id: string;\n  timestamp: string;\n  type: string;\n}\n\nexport interface ServerErrorEvent {\n  error: string;\n  error_type: string;\n  timestamp: string;\n  type: string;\n}\n\nexport interface MessageBlockedEvent {\n  originalMessage: string;\n  reason: string;\n  timestamp: string;\n  type: string;\n}\n\n// Connection states\nexport enum ConnectionState {\n  CONNECTING = WebSocket.CONNECTING,\n  OPEN = WebSocket.OPEN,\n  CLOSING = WebSocket.CLOSING,\n  CLOSED = WebSocket.CLOSED\n}\n\n// Types for internal use\nexport interface ConnectionStatus {\n  isConnected: boolean;\n  isConnecting: boolean;\n  isReconnecting: boolean;\n  currentRoom: string | null;\n  state: ConnectionState;\n}\n\nexport interface MessageHandler {\n  type: string;\n  handler: (message: WebSocketMessage) => void;\n}\n","import { logger } from '../core/logger';\nimport { WebSocketOptions, WebSocketEvent, ConnectionState, ConnectionStatus } from '../core/types';\n\nexport class ConnectionManager {\n  private ws: WebSocket | null = null;\n  private options: WebSocketOptions;\n  private isConnecting: boolean = false;\n  private currentRoom: string | null = null;\n  private onDisconnectCallback?: () => void;\n\n  constructor(options: WebSocketOptions) {\n    this.options = options;\n  }\n\n  /**\n   * Set disconnect handler\n   */\n  setDisconnectCallback(callback: () => void): void {\n    this.onDisconnectCallback = callback;\n  }\n\n  /**\n   * Connect to WebSocket server\n   */\n  async connect(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n        resolve();\n        return;\n      }\n\n      if (this.isConnecting) {\n        reject(new Error('Connection already in progress'));\n        return;\n      }\n\n      this.isConnecting = true;\n      \n      // Build URL with clientId if available\n      let connectionUrl = this.options.url;\n      if (this.options.clientId) {\n        const separator = connectionUrl.includes('?') ? '&' : '?';\n        connectionUrl = `${connectionUrl}${separator}clientId=${encodeURIComponent(this.options.clientId)}`;\n      }\n      \n      logger.info(`🔌 Connecting to ${connectionUrl}`, 'connection');\n\n      try {\n        this.ws = new WebSocket(connectionUrl, this.options.protocols);\n        this.setupEventHandlers(resolve, reject);\n      } catch (error) {\n        this.isConnecting = false;\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Setup WebSocket event handlers\n   */\n  private setupEventHandlers(resolve: () => void, _reject: (error: Error) => void): void {\n    if (!this.ws) return;\n\n    this.ws.onopen = () => {\n      this.isConnecting = false;\n      \n      logger.info('✅ WebSocket connected', 'connection');\n      \n      // Call user handler\n      if (this.options.onConnect) {\n        const wsEvent: WebSocketEvent = {\n          type: 'connect',\n          data: { url: this.options.url, clientId: this.options.clientId },\n          timestamp: Date.now()\n        };\n        this.options.onConnect(wsEvent);\n      }\n      \n      resolve();\n    };\n\n    this.ws.onclose = (event) => {\n      this.isConnecting = false;\n      \n      logger.warn(`🔌 WebSocket closed: ${event.code} ${event.reason}`, 'connection');\n      \n      // Call user handler\n      if (this.options.onDisconnect) {\n        const wsEvent: WebSocketEvent = {\n          type: 'disconnect',\n          data: { code: event.code, reason: event.reason, wasClean: event.wasClean },\n          timestamp: Date.now()\n        };\n        this.options.onDisconnect(wsEvent);\n      }\n      \n      // Call internal disconnect handler\n      if (this.onDisconnectCallback) {\n        this.onDisconnectCallback();\n      }\n    };\n\n    this.ws.onerror = (error) => {\n      this.isConnecting = false;\n      logger.error(`❌ WebSocket error: ${error}`, 'connection');\n      \n      // Call user handler\n      if (this.options.onError) {\n        const wsEvent: WebSocketEvent = {\n          type: 'error',\n          data: { error: error.toString() },\n          timestamp: Date.now()\n        };\n        this.options.onError(wsEvent);\n      }\n      \n      // Don't reject promise on error as this may be a temporary issue\n      // reject(new Error(`WebSocket connection failed: ${error}`));\n    };\n\n    // Add binary message handler\n    this.ws.onmessage = (event) => {\n      if (event.data instanceof ArrayBuffer || event.data instanceof Blob) {\n        logger.debug(`📦 Binary message received: ${event.data instanceof ArrayBuffer ? event.data.byteLength : 'blob'} bytes`, 'connection');\n        \n        // Call user handler for binary messages\n        if (this.options.onBinaryMessage) {\n          const wsEvent: WebSocketEvent = {\n            type: 'binary_message',\n            data: event.data,\n            timestamp: Date.now()\n          };\n          this.options.onBinaryMessage(wsEvent);\n        }\n      }\n    };\n  }\n\n  /**\n   * Disconnect from server\n   */\n  disconnect(): void {\n    logger.info('🔌 Disconnecting from WebSocket server', 'connection');\n    \n    if (this.ws) {\n      this.ws.close(1000, 'Client disconnect');\n      this.ws = null;\n    }\n    \n    this.isConnecting = false;\n    this.currentRoom = null;\n  }\n\n  /**\n   * Get WebSocket connection\n   */\n  getWebSocket(): WebSocket | null {\n    return this.ws;\n  }\n\n  /**\n   * Get current connection state\n   */\n  getState(): ConnectionState {\n    return this.ws ? this.ws.readyState : ConnectionState.CLOSED;\n  }\n\n  /**\n   * Check connection\n   */\n  isConnected(): boolean {\n    return this.ws ? this.ws.readyState === WebSocket.OPEN : false;\n  }\n\n  /**\n   * Get connection status\n   */\n  getConnectionStatus(): ConnectionStatus {\n    return {\n      isConnected: this.isConnected(),\n      isConnecting: this.isConnecting,\n      isReconnecting: false, // Managed by ReconnectionManager\n      currentRoom: this.currentRoom,\n      state: this.getState()\n    };\n  }\n\n  /**\n   * Set current room\n   */\n  setCurrentRoom(roomId: string | null): void {\n    this.currentRoom = roomId;\n  }\n\n  /**\n   * Get current room\n   */\n  getCurrentRoom(): string | null {\n    return this.currentRoom;\n  }\n}\n","import { logger } from '../core/logger';\nimport { WebSocketMessage, WebSocketOptions, RoomEvent } from '../core/types';\nimport { ConnectionManager } from './manager';\n\nexport class RoomManager {\n  private connectionManager: ConnectionManager;\n  private options: WebSocketOptions;\n\n  constructor(connectionManager: ConnectionManager, options: WebSocketOptions) {\n    this.connectionManager = connectionManager;\n    this.options = options;\n  }\n\n  /**\n   * Join room\n   */\n  joinRoom(roomId: string): boolean {\n    const ws = this.connectionManager.getWebSocket();\n    if (!ws || ws.readyState !== WebSocket.OPEN) {\n      logger.error('❌ WebSocket not connected', 'rooms');\n      return false;\n    }\n\n    try {\n      const message: WebSocketMessage = {\n        type: 'join_room',\n        room_id: roomId,  // Use snake_case in root object\n        timestamp: new Date().toISOString()\n      };\n\n      ws.send(JSON.stringify(message));\n      this.connectionManager.setCurrentRoom(roomId);\n      \n      logger.info(`🔗 Joined room: ${roomId}`, 'rooms');\n      \n          // Call user handler\n    if (this.options.onJoinRoom) {\n        const roomEvent: RoomEvent = { roomId, timestamp: Date.now() };\n        this.options.onJoinRoom(roomEvent);\n      }\n      \n      return true;\n    } catch (error) {\n      logger.error(`❌ Error joining room: ${error}`, 'rooms');\n      return false;\n    }\n  }\n\n  /**\n   * Leave room\n   */\n  leaveRoom(roomId?: string): boolean {\n    const ws = this.connectionManager.getWebSocket();\n    if (!ws || ws.readyState !== WebSocket.OPEN) {\n      logger.error('❌ WebSocket not connected', 'rooms');\n      return false;\n    }\n\n    const targetRoom = roomId || this.connectionManager.getCurrentRoom();\n    if (!targetRoom) {\n      logger.warn('⚠️ Not in any room', 'rooms');\n      return false;\n    }\n\n    try {\n      const message: WebSocketMessage = {\n        type: 'leave_room',\n        room_id: targetRoom,  // Use snake_case in root object\n        timestamp: new Date().toISOString()\n      };\n\n      ws.send(JSON.stringify(message));\n      \n      if (targetRoom === this.connectionManager.getCurrentRoom()) {\n        this.connectionManager.setCurrentRoom(null);\n      }\n      \n      logger.info(`🚪 Left room: ${targetRoom}`, 'rooms');\n      \n          // Call user handler\n    if (this.options.onLeaveRoom) {\n        const roomEvent: RoomEvent = { roomId: targetRoom, timestamp: Date.now() };\n        this.options.onLeaveRoom(roomEvent);\n      }\n      \n      return true;\n    } catch (error) {\n      logger.error(`❌ Error leaving room: ${error}`, 'rooms');\n      return false;\n    }\n  }\n\n  /**\n   * Get current room\n   */\n  getCurrentRoom(): string | null {\n    return this.connectionManager.getCurrentRoom();\n  }\n\n  /**\n   * Check if in room\n   */\n  isInRoom(roomId?: string): boolean {\n    const currentRoom = this.connectionManager.getCurrentRoom();\n    return roomId ? currentRoom === roomId : currentRoom !== null;\n  }\n}\n","import { logger } from '../core/logger';\nimport { WebSocketMessage, WebSocketOptions, WebSocketEvent, WelcomeMessage, RoomMessageEvent, DirectMessageEvent, MessageAckEvent, ServerErrorEvent } from '../core/types';\nimport { ConnectionManager } from './manager';\nimport { PingPongManager } from './pingpong';\nimport { EventEmitter } from '../core/events';\n\nexport class MessageManager extends EventEmitter {\n  private connectionManager: ConnectionManager;\n  private options: WebSocketOptions;\n  private pingPongManager: PingPongManager | undefined;\n\n  constructor(connectionManager: ConnectionManager, options: WebSocketOptions, pingPongManager?: PingPongManager) {\n    super();\n    this.connectionManager = connectionManager;\n    this.options = options;\n    this.pingPongManager = pingPongManager;\n    // Don't setup handler here as WebSocket is not created yet\n  }\n\n  /**\n   * Setup message handler\n   */\n  private setupMessageHandler(): void {\n    const ws = this.connectionManager.getWebSocket();\n    if (!ws) {\n      logger.error('❌ WebSocket not available for message handler', 'messages');\n      return;\n    }\n\n    ws.onmessage = (event) => {\n      try {\n        logger.debug(`📨 Raw message received: ${event.data}`, 'messages');\n        const message: WebSocketMessage = JSON.parse(event.data);\n        logger.debug(`📨 Message parsed: ${message.type}`, 'messages');\n        \n        this.handleMessage(message);\n      } catch (error) {\n        logger.error(`❌ Error parsing message: ${error}`, 'messages');\n      }\n    };\n  }\n\n  /**\n   * Public method to setup message handler after connection\n   */\n  public setupMessageHandlerAfterConnect(): void {\n    logger.info('🔧 Setting up message handler after connection', 'messages');\n    this.setupMessageHandler();\n  }\n\n  /**\n   * Handle incoming messages\n   */\n  private handleMessage(message: WebSocketMessage): void {\n    logger.debug(`🔍 Handling message type: ${message.type}`, 'messages');\n    switch (message.type) {\n      case 'welcome':\n        logger.debug('🎯 Welcome case matched', 'messages');\n        this.handleWelcome(message as WelcomeMessage);\n        break;\n      case 'ping':\n        this.handlePing(message);\n        break;\n      case 'pong':\n        this.handlePong(message);\n        break;\n      case 'room_joined':\n        this.handleRoomJoined(message);\n        break;\n      case 'room_left':\n        this.handleRoomLeft(message);\n        break;\n      case 'room_message':\n        this.handleRoomMessage(message as unknown as RoomMessageEvent);\n        break;\n      case 'message_ack':\n        logger.debug('✅ Message ack case matched', 'messages');\n        this.handleMessageAck(message as unknown as MessageAckEvent);\n        break;\n      case 'direct_message':\n        this.handleDirectMessage(message as unknown as DirectMessageEvent);\n        break;\n      case 'error':\n        this.handleServerError(message as unknown as ServerErrorEvent);\n        break;\n      default:\n        this.handleGenericMessage(message);\n        break;\n    }\n  }\n\n  /**\n   * Handle welcome message\n   */\n  private handleWelcome(message: WelcomeMessage): void {\n    logger.info('👋 Welcome message received', 'messages');\n    logger.debug(`👋 Welcome message data: ${JSON.stringify(message)}`, 'messages');\n    this.emit('welcome', message);\n    \n    if (this.options.onWelcome) {\n      logger.info('👋 Calling onWelcome callback', 'messages');\n      this.options.onWelcome(message);\n    } else {\n      logger.warn('⚠️ onWelcome callback not set', 'messages');\n    }\n  }\n\n  /**\n   * Handle ping message\n   */\n  private handlePing(message: WebSocketMessage): void {\n    logger.info('🏓 Ping received from server', 'messages');\n    \n    // Use new method for handling ping from server\n    if (this.pingPongManager) {\n      this.pingPongManager.handlePingFromServer();\n    }\n    \n    this.emit('ping', message);\n  }\n\n  /**\n   * Handle pong message\n   */\n  private handlePong(message: WebSocketMessage): void {\n    if (this.pingPongManager) {\n      this.pingPongManager.handlePongFromServer();\n    }\n    this.emit('pong', message);\n  }\n\n  /**\n   * Handle room joined message\n   */\n  private handleRoomJoined(message: WebSocketMessage): void {\n    logger.info('🏠 Room joined message received', 'messages');\n    const roomEvent = { roomId: message.room_id as string, timestamp: Date.now() };\n    this.emit('join_room', roomEvent);\n    \n    if (this.options.onJoinRoom) {\n      this.options.onJoinRoom(roomEvent);\n    }\n  }\n\n  /**\n   * Handle room left message\n   */\n  private handleRoomLeft(message: WebSocketMessage): void {\n    logger.info('🚪 Room left message received', 'messages');\n    const roomEvent = { roomId: message.room_id as string, timestamp: Date.now() };\n    this.emit('leave_room', roomEvent);\n    \n    if (this.options.onLeaveRoom) {\n      this.options.onLeaveRoom(roomEvent);\n    }\n  }\n\n  /**\n   * Handle room message\n   */\n  private handleRoomMessage(message: RoomMessageEvent): void {\n    logger.info('📨 Room message received', 'messages');\n    this.emit('room_message', message);\n    \n    if (this.options.onRoomMessage) {\n      this.options.onRoomMessage(message);\n    }\n  }\n\n  /**\n   * Handle message acknowledgment\n   */\n  private handleMessageAck(message: MessageAckEvent): void {\n    logger.info('✅ Message acknowledgment received', 'messages');\n    logger.debug(`✅ Message ack data: ${JSON.stringify(message)}`, 'messages');\n    \n    // Check if this is a pong acknowledgment\n    if (message.message && typeof message.message === 'string') {\n      logger.debug(`🔍 Checking message: ${message.message}`, 'messages');\n      try {\n        const ackedMessage = JSON.parse(message.message);\n        logger.debug(`🔍 Parsed acked message: ${JSON.stringify(ackedMessage)}`, 'messages');\n        if (ackedMessage.type === 'pong') {\n          logger.debug('🏓 Pong acknowledgment received', 'messages');\n          // Call pong handler\n          if (this.pingPongManager) {\n            logger.debug('🏓 Calling handlePongFromServer', 'messages');\n            this.pingPongManager.handlePongFromServer();\n          } else {\n            logger.warn('⚠️ PingPongManager not available', 'messages');\n          }\n        } else {\n          logger.debug(`✅ Regular message ack for type: ${ackedMessage.type}`, 'messages');\n        }\n      } catch (error) {\n        logger.debug(`❌ Error parsing acked message: ${error}`, 'messages');\n      }\n    } else {\n      logger.debug('✅ Message ack without message field', 'messages');\n    }\n    \n    this.emit('message_ack', message);\n    \n    if (this.options.onMessageAck) {\n      this.options.onMessageAck(message);\n    }\n  }\n\n  /**\n   * Handle direct message\n   */\n  private handleDirectMessage(message: DirectMessageEvent): void {\n    logger.info('📨 Direct message received', 'messages');\n    this.emit('direct_message', message);\n    \n    if (this.options.onDirectMessage) {\n      this.options.onDirectMessage(message);\n    }\n  }\n\n  /**\n   * Handle server error\n   */\n  private handleServerError(message: ServerErrorEvent): void {\n    logger.error(`❌ Server error: ${message.error} (${message.error_type})`, 'messages');\n    this.emit('error', message);\n    \n    if (this.options.onServerError) {\n      this.options.onServerError(message);\n    }\n  }\n\n  /**\n   * Handle generic message\n   */\n  private handleGenericMessage(message: WebSocketMessage): void {\n    if (this.options.onMessage) {\n      const wsEvent: WebSocketEvent = {\n        type: 'message',\n        data: message,\n        timestamp: Date.now()\n      };\n      this.options.onMessage(wsEvent);\n    }\n    \n    this.emit('message', message);\n  }\n\n  /**\n   * Send message\n   */\n  send(data: unknown, roomId?: string): boolean {\n    const ws = this.connectionManager.getWebSocket();\n    if (!ws || ws.readyState !== WebSocket.OPEN) {\n      logger.error('❌ WebSocket not connected', 'messages');\n      return false;\n    }\n\n    try {\n      const message: WebSocketMessage = {\n        type: 'message',\n        data,\n        timestamp: new Date().toISOString(),\n        room_id: roomId || this.connectionManager.getCurrentRoom() || null  // snake_case\n      };\n\n      ws.send(JSON.stringify(message));\n      logger.debug(`📤 Message sent: ${JSON.stringify(data).substring(0, 100)}...`, 'messages');\n      return true;\n    } catch (error) {\n      logger.error(`❌ Error sending message: ${error}`, 'messages');\n      return false;\n    }\n  }\n\n  /**\n   * Send message to room\n   */\n  sendToRoom(roomId: string, message: unknown): boolean {\n    const ws = this.connectionManager.getWebSocket();\n    if (!ws || ws.readyState !== WebSocket.OPEN) {\n      logger.error('❌ WebSocket not connected', 'messages');\n      return false;\n    }\n\n    try {\n      const wsMessage: WebSocketMessage = {\n        type: 'room_message',\n        data: message,\n        timestamp: new Date().toISOString(),\n        room_id: roomId  // Use snake_case for server compatibility\n      };\n\n      ws.send(JSON.stringify(wsMessage));\n      logger.debug(`📤 Room message sent to ${roomId}: ${JSON.stringify(message).substring(0, 100)}...`, 'messages');\n      return true;\n    } catch (error) {\n      logger.error(`❌ Error sending room message: ${error}`, 'messages');\n      return false;\n    }\n  }\n\n  /**\n   * Send direct message to client by ID\n   */\n  sendDirectMessage(clientId: string, message: unknown): boolean {\n    const ws = this.connectionManager.getWebSocket();\n    if (!ws || ws.readyState !== WebSocket.OPEN) {\n      logger.error('❌ WebSocket not connected', 'messages');\n      return false;\n    }\n\n    try {\n      const wsMessage: WebSocketMessage = {\n        type: 'direct_message',\n        data: message,\n        timestamp: new Date().toISOString(),\n        target_client_id: clientId  // Use snake_case for server compatibility\n      };\n\n      ws.send(JSON.stringify(wsMessage));\n      logger.debug(`📤 Direct message sent to client ${clientId}: ${message}`, 'messages');\n      return true;\n    } catch (error) {\n      logger.error(`❌ Error sending direct message: ${error}`, 'messages');\n      return false;\n    }\n  }\n}\n","import { logger } from '../core/logger';\nimport { WebSocketMessage, WebSocketOptions, PingEvent, PongEvent } from '../core/types';\nimport { ConnectionManager } from './manager';\nimport { EventEmitter } from '../core/events';\n\nexport class PingPongManager extends EventEmitter {\n  private connectionManager: ConnectionManager;\n  private options: WebSocketOptions;\n  private pongTimer: NodeJS.Timeout | null = null;\n  private lastPing: number = 0;\n  private lastPong: number = 0;\n  private pongTimeoutId: NodeJS.Timeout | null = null;\n\n  constructor(connectionManager: ConnectionManager, options: WebSocketOptions) {\n    super();\n    this.connectionManager = connectionManager;\n    this.options = options;\n  }\n\n  /**\n   * Start ping/pong mechanism (client only responds to server ping)\n   */\n  start(): void {\n    logger.debug('🏓 Ping/pong mechanism started (client responds to server pings)', 'pingpong');\n  }\n\n  /**\n   * Stop ping/pong mechanism\n   */\n  stop(): void {\n    if (this.pongTimer) {\n      clearTimeout(this.pongTimer);\n      this.pongTimer = null;\n    }\n    \n    if (this.pongTimeoutId) {\n      clearTimeout(this.pongTimeoutId);\n      this.pongTimeoutId = null;\n    }\n    \n    logger.debug('🏓 Ping/pong mechanism stopped', 'pingpong');\n  }\n\n  /**\n   * Handle ping from server (client only responds)\n   */\n  handlePingFromServer(): void {\n    this.lastPing = Date.now();\n    \n    // Send pong in response\n    this.sendPong();\n    \n    // Set timeout for waiting for next ping\n    if (this.options.pongTimeout) {\n      this.pongTimeoutId = setTimeout(() => {\n        logger.warn('⚠️ No ping received from server, connection may be stale', 'pingpong');\n        const ws = this.connectionManager.getWebSocket();\n        if (ws && ws.readyState === WebSocket.OPEN) {\n          ws.close(1000, 'No ping from server');\n        }\n      }, this.options.pongTimeout);\n    }\n    \n    logger.debug('🏓 Ping received from server, pong sent', 'pingpong');\n    \n    // Generate ping event\n    const pingEvent: PingEvent = { timestamp: this.lastPing };\n    this.emit('ping', pingEvent);\n    \n    // Call user handler\n    if (this.options.onPing) {\n      this.options.onPing(pingEvent);\n    }\n  }\n\n  /**\n   * Send pong in response to ping from server\n   */\n  private sendPong(): void {\n    const ws = this.connectionManager.getWebSocket();\n    if (!ws || ws.readyState !== WebSocket.OPEN) return;\n    \n    try {\n      const pongMessage: WebSocketMessage = {\n        type: 'pong',\n        data: { timestamp: new Date().toISOString() },\n        timestamp: new Date().toISOString()\n      };\n      \n      ws.send(JSON.stringify(pongMessage));\n      logger.debug('🏓 Pong sent to server', 'pingpong');\n    } catch (error) {\n      logger.error(`❌ Error sending pong: ${error}`, 'pingpong');\n    }\n  }\n\n  /**\n   * Handle pong from server (for confirmation)\n   */\n  handlePongFromServer(): void {\n    this.lastPong = Date.now();\n    \n    // Clear timeout since we received pong from server\n    if (this.pongTimeoutId) {\n      clearTimeout(this.pongTimeoutId);\n      this.pongTimeoutId = null;\n    }\n    \n    const latency = this.lastPong - this.lastPing;\n    logger.debug(`🏓 Pong received from server, latency: ${latency}ms`, 'pingpong');\n    \n    // Generate pong event\n    const pongEvent: PongEvent = { latency, timestamp: this.lastPong };\n    this.emit('pong', pongEvent);\n    \n    // Call user handler\n    if (this.options.onPong) {\n      this.options.onPong(pongEvent);\n    }\n  }\n\n  /**\n   * Get last ping\n   */\n  getLastPing(): number {\n    return this.lastPing;\n  }\n\n  /**\n   * Get last pong\n   */\n  getLastPong(): number {\n    return this.lastPong;\n  }\n\n  /**\n   * Get current latency\n   */\n  getLatency(): number {\n    if (this.lastPing === 0 || this.lastPong === 0) return 0;\n    return this.lastPong - this.lastPing;\n  }\n\n  /**\n   * Check ping/pong activity\n   */\n  isActive(): boolean {\n    return this.pongTimeoutId !== null;\n  }\n}\n","import { logger } from '../core/logger';\nimport { WebSocketOptions, ReconnectEvent } from '../core/types';\nimport { ConnectionManager } from './manager';\nimport { RoomManager } from './rooms';\nimport { EventEmitter } from '../core/events';\n\nexport class ReconnectionManager extends EventEmitter {\n  private connectionManager: ConnectionManager;\n  private roomManager: RoomManager;\n  private options: WebSocketOptions;\n  private reconnectTimer: NodeJS.Timeout | null = null;\n  private isReconnecting: boolean = false;\n  private currentAttempt: number = 0;\n  private previousRooms: string[] = [];  // Save rooms for restoration\n\n  constructor(connectionManager: ConnectionManager, options: WebSocketOptions, roomManager?: RoomManager) {\n    super();\n    this.connectionManager = connectionManager;\n    this.roomManager = roomManager || new RoomManager(connectionManager, options);\n    this.options = options;\n  }\n\n  /**\n   * Save current rooms before reconnection\n   */\n  private saveCurrentRooms(): void {\n    const currentRoom = this.roomManager.getCurrentRoom();\n    if (currentRoom) {\n      this.previousRooms = [currentRoom];\n      logger.debug(`💾 Saved room for reconnection: ${currentRoom}`, 'reconnection');\n    }\n  }\n\n  /**\n   * Restore rooms after reconnection\n   */\n  private async restoreRooms(): Promise<void> {\n    if (this.previousRooms.length > 0) {\n      logger.debug(`🔄 Restoring ${this.previousRooms.length} rooms after reconnection`, 'reconnection');\n      \n      for (const roomId of this.previousRooms) {\n        try {\n          await this.roomManager.joinRoom(roomId);\n          logger.debug(`✅ Restored room: ${roomId}`, 'reconnection');\n        } catch (error) {\n          logger.error(`❌ Failed to restore room ${roomId}: ${error}`, 'reconnection');\n        }\n      }\n    }\n  }\n\n  /**\n   * Schedule reconnection\n   */\n  scheduleReconnect(): void {\n    if (!this.options.autoReconnect) return;\n    \n    if (this.currentAttempt >= (this.options.reconnectAttempts || 5)) {\n      logger.error(`❌ Max reconnection attempts reached (${this.options.reconnectAttempts})`, 'reconnection');\n      return;\n    }\n    \n    this.isReconnecting = true;\n    this.currentAttempt++;\n    \n    // Save current rooms before reconnection\n    this.saveCurrentRooms();\n    \n    const delay = (this.options.reconnectDelay || 1000) * Math.pow(2, this.currentAttempt - 1);\n    logger.info(`🔄 Reconnecting in ${delay}ms (attempt ${this.currentAttempt}/${this.options.reconnectAttempts})`, 'reconnection');\n    \n    // Generate reconnect event\n    const reconnectEvent: ReconnectEvent = {\n      attempt: this.currentAttempt,\n      maxAttempts: this.options.reconnectAttempts || 5,\n      delay,\n      timestamp: Date.now()\n    };\n    this.emit('reconnect', reconnectEvent);\n    \n    // Call user handler\n    if (this.options.onReconnect) {\n      this.options.onReconnect(reconnectEvent);\n    }\n    \n    this.reconnectTimer = setTimeout(() => {\n      this.performReconnect();\n    }, delay);\n  }\n\n  /**\n   * Execute reconnection\n   */\n  private async performReconnect(): Promise<void> {\n    try {\n      await this.connectionManager.connect();\n      \n      // Restore rooms after successful reconnection\n      await this.restoreRooms();\n      \n      this.resetReconnection();\n    } catch (error) {\n      logger.error(`❌ Reconnection failed: ${error}`, 'reconnection');\n      this.scheduleReconnect();\n    }\n  }\n\n  /**\n   * Reset reconnection state\n   */\n  resetReconnection(): void {\n    this.isReconnecting = false;\n    this.currentAttempt = 0;\n    \n    if (this.reconnectTimer) {\n      clearTimeout(this.reconnectTimer);\n      this.reconnectTimer = null;\n    }\n    \n    logger.info('✅ Reconnection successful', 'reconnection');\n  }\n\n  /**\n   * Cancel reconnection\n   */\n  cancelReconnect(): void {\n    if (this.reconnectTimer) {\n      clearTimeout(this.reconnectTimer);\n      this.reconnectTimer = null;\n    }\n    this.isReconnecting = false;\n    this.currentAttempt = 0;\n    \n    logger.debug('🛑 Reconnection cancelled', 'reconnection');\n  }\n\n  /**\n   * Check reconnection state\n   */\n  getIsReconnecting(): boolean {\n    return this.isReconnecting;\n  }\n\n  /**\n   * Get current attempt\n   */\n  getCurrentAttempt(): number {\n    return this.currentAttempt;\n  }\n\n  /**\n   * Get maximum attempts\n   */\n  getMaxAttempts(): number {\n    return this.options.reconnectAttempts || 5;\n  }\n\n  /**\n   * Update reconnection configuration\n   */\n  updateConfig(newOptions: Partial<WebSocketOptions>): void {\n    this.options = { ...this.options, ...newOptions };\n  }\n}\n","import { logger } from './core/logger';\nimport { WebSocketOptions, ConnectionState, ConnectionStatus } from './core/types';\nimport { EventEmitter } from './core/events';\nimport { ConnectionManager } from './connection/manager';\nimport { RoomManager } from './connection/rooms';\nimport { MessageManager } from './connection/messages';\nimport { PingPongManager } from './connection/pingpong';\nimport { ReconnectionManager } from './connection/reconnection';\n\nexport class RNodeWebSocketClient extends EventEmitter {\n  private options: WebSocketOptions;\n  private connectionManager: ConnectionManager;\n  private roomManager: RoomManager;\n  private messageManager: MessageManager;\n  private pingPongManager: PingPongManager;\n  private reconnectionManager: ReconnectionManager;\n\n  constructor(options: WebSocketOptions) {\n    super();\n    \n    this.options = {\n      autoReconnect: true,\n      reconnectAttempts: 5,\n      reconnectDelay: 1000,\n      pingInterval: 30000,\n      pongTimeout: 10000,\n      ...options\n    };\n\n    // Initialize managers\n    this.connectionManager = new ConnectionManager(this.options);\n    this.roomManager = new RoomManager(this.connectionManager, this.options);\n    this.pingPongManager = new PingPongManager(this.connectionManager, this.options);\n    this.messageManager = new MessageManager(this.connectionManager, this.options, this.pingPongManager);\n    this.reconnectionManager = new ReconnectionManager(this.connectionManager, this.options, this.roomManager);\n\n    // Setup event handlers\n    this.setupEventHandlers();\n\n    // Set disconnect callback for reconnection\n    this.connectionManager.setDisconnectCallback(() => {\n      if (this.options.autoReconnect) {\n        this.reconnectionManager.scheduleReconnect();\n      }\n    });\n\n    logger.info('🔌 RNode WebSocket Client initialized', 'client');\n  }\n\n  /**\n   * Setup event handlers from managers\n   */\n  private setupEventHandlers(): void {\n    // Proxy events from managers\n    this.messageManager.on('welcome', (data: unknown) => this.emit('welcome', data));\n    this.messageManager.on('ping', (data: unknown) => this.emit('ping', data));\n    this.messageManager.on('pong', (data: unknown) => this.emit('pong', data));\n    this.messageManager.on('join_room', (data: unknown) => this.emit('join_room', data));\n    this.messageManager.on('leave_room', (data: unknown) => this.emit('leave_room', data));\n    this.messageManager.on('message', (data: unknown) => this.emit('message', data));\n    this.messageManager.on('direct_message', (data: unknown) => this.emit('direct_message', data));\n    this.messageManager.on('room_message', (data: unknown) => this.emit('room_message', data));\n    this.messageManager.on('message_ack', (data: unknown) => this.emit('message_ack', data));\n    this.messageManager.on('error', (data: unknown) => this.emit('error', data));\n\n    this.reconnectionManager.on('reconnect', (data: unknown) => this.emit('reconnect', data));\n    this.pingPongManager.on('ping', (data: unknown) => this.emit('ping', data));\n    this.pingPongManager.on('pong', (data: unknown) => this.emit('pong', data));\n  }\n\n  /**\n   * Connect to WebSocket server\n   */\n  async connect(): Promise<void> {\n    await this.connectionManager.connect();\n    \n    // Setup message handler after connection\n    this.messageManager.setupMessageHandlerAfterConnect();\n    \n    this.pingPongManager.start();\n    \n    // Generate connect event\n    this.emit('connect', {\n      url: this.options.url,\n      clientId: this.options.clientId,\n      timestamp: Date.now()\n    });\n  }\n\n  /**\n   * Disconnect from server\n   */\n  disconnect(): void {\n    logger.info('🔌 Disconnecting from WebSocket server', 'client');\n    \n    this.pingPongManager.stop();\n    this.reconnectionManager.cancelReconnect();\n    this.connectionManager.disconnect();\n  }\n\n  /**\n   * Send message\n   */\n  send(data: unknown, roomId?: string): boolean {\n    return this.messageManager.send(data, roomId);\n  }\n\n  /**\n   * Send message to room\n   */\n  sendToRoom(roomId: string, message: unknown): boolean {\n    return this.messageManager.sendToRoom(roomId, message);\n  }\n\n  /**\n   * Send direct message to client by ID\n   */\n  sendDirectMessage(clientId: string, message: unknown): boolean {\n    return this.messageManager.sendDirectMessage(clientId, message);\n  }\n\n  /**\n   * Join room\n   */\n  joinRoom(roomId: string): boolean {\n    return this.roomManager.joinRoom(roomId);\n  }\n\n  /**\n   * Leave room\n   */\n  leaveRoom(roomId?: string): boolean {\n    return this.roomManager.leaveRoom(roomId);\n  }\n\n  /**\n   * Get current connection state\n   */\n  getState(): ConnectionState {\n    return this.connectionManager.getState();\n  }\n\n  /**\n   * Check connection\n   */\n  isConnected(): boolean {\n    return this.connectionManager.isConnected();\n  }\n\n  /**\n   * Get current room\n   */\n  getCurrentRoom(): string | null {\n    return this.roomManager.getCurrentRoom();\n  }\n\n  /**\n   * Get connection status\n   */\n  getConnectionStatus(): ConnectionStatus {\n    const status = this.connectionManager.getConnectionStatus();\n    return {\n      ...status,\n      isReconnecting: this.reconnectionManager.getIsReconnecting()\n    };\n  }\n\n  /**\n   * Get ping/pong latency\n   */\n  getLatency(): number {\n    return this.pingPongManager.getLatency();\n  }\n\n  /**\n   * Update configuration\n   */\n  updateOptions(newOptions: Partial<WebSocketOptions>): void {\n    this.options = { ...this.options, ...newOptions };\n    \n    // Update configuration in managers\n    this.reconnectionManager.updateConfig(newOptions);\n    \n    // Restart ping/pong if interval changed\n    if (newOptions.pingInterval !== undefined) {\n      this.pingPongManager.stop();\n      this.pingPongManager.start();\n    }\n    \n    logger.info('🔧 WebSocket options updated', 'client');\n  }\n\n  /**\n   * Get statistics\n   */\n  getStats(): {\n    connection: ConnectionStatus;\n    latency: number;\n    reconnectionAttempts: number;\n    maxReconnectionAttempts: number;\n  } {\n    return {\n      connection: this.getConnectionStatus(),\n      latency: this.getLatency(),\n      reconnectionAttempts: this.reconnectionManager.getCurrentAttempt(),\n      maxReconnectionAttempts: this.reconnectionManager.getMaxAttempts()\n    };\n  }\n}\n","import { ConnectionState } from '../core/types';\n\nexport class WebSocketUtils {\n  /**\n * Check WebSocket support in browser\n */\n  static isSupported(): boolean {\n    return typeof WebSocket !== 'undefined';\n  }\n\n  /**\n   * Get connection state as text\n   */\n  static getStateString(state: ConnectionState): string {\n    switch (state) {\n      case ConnectionState.CONNECTING:\n        return 'CONNECTING';\n      case ConnectionState.OPEN:\n        return 'OPEN';\n      case ConnectionState.CLOSING:\n        return 'CLOSING';\n      case ConnectionState.CLOSED:\n        return 'CLOSED';\n      default:\n        return 'UNKNOWN';\n    }\n  }\n\n  /**\n   * Create unique client ID\n   */\n  static generateClientId(): string {\n    return `client_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Validate WebSocket URL\n   */\n  static isValidUrl(url: string): boolean {\n    try {\n      const urlObj = new URL(url);\n      return urlObj.protocol === 'ws:' || urlObj.protocol === 'wss:';\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Create URL with parameters\n   */\n  static buildUrl(baseUrl: string, params: Record<string, string>): string {\n    const url = new URL(baseUrl);\n    Object.entries(params).forEach(([key, value]) => {\n      url.searchParams.append(key, value);\n    });\n    return url.toString();\n  }\n\n  /**\n   * Format time\n   */\n  static formatTimestamp(timestamp: number): string {\n    return new Date(timestamp).toISOString();\n  }\n\n  /**\n   * Check JSON validity\n   */\n  static isValidJSON(str: string): boolean {\n    try {\n      JSON.parse(str);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Safe JSON parsing\n   */\n  static safeJSONParse<T>(str: string, fallback: T): T {\n    try {\n      return JSON.parse(str) as T;\n    } catch {\n      return fallback;\n    }\n  }\n\n  /**\n   * Generate random ID\n   */\n  static generateId(): string {\n    return Math.random().toString(36).substr(2, 9);\n  }\n\n  /**\n   * Check message type\n   */\n  static isSystemMessage(type: string): boolean {\n    const systemTypes = ['ping', 'pong', 'welcome', 'room_joined', 'room_left', 'message_ack'];\n    return systemTypes.includes(type);\n  }\n\n  /**\n   * Check room type\n   */\n  static isRoomMessage(type: string): boolean {\n    return type === 'room_message' || type === 'join_room' || type === 'leave_room';\n  }\n\n  /**\n   * Check direct message type\n   */\n  static isDirectMessage(type: string): boolean {\n    return type === 'direct_message';\n  }\n}\n","import { RNodeWebSocketClient } from './client';\nimport { Logger, LogLevel } from './core/logger';\nimport { WebSocketUtils } from './utils/websocket';\nimport type {\n  WebSocketOptions\n} from './core/types';\n\n// Main exports\nexport { RNodeWebSocketClient } from './client';\nexport { Logger, LogLevel } from './core/logger';\nexport { WebSocketUtils } from './utils/websocket';\nexport { EventEmitter } from './core/events';\n\n// Types\nexport type {\n  WebSocketOptions,\n  WebSocketEvent,\n  WebSocketMessage,\n  WelcomeMessage,\n  RoomInfo,\n  ConnectionInfo,\n  ReconnectConfig,\n  PingPongConfig,\n  ReconnectEvent,\n  RoomEvent,\n  PingEvent,\n  PongEvent,\n  MessageAckEvent,\n  RoomMessageEvent,\n  DirectMessageEvent,\n  ServerErrorEvent,\n  MessageBlockedEvent,\n  ConnectionStatus,\n  MessageHandler\n} from './core/types';\n\nexport { ConnectionState } from './core/types';\n\n// Managers (for internal use)\nexport { ConnectionManager } from './connection/manager';\nexport { RoomManager } from './connection/rooms';\nexport { MessageManager } from './connection/messages';\nexport { PingPongManager } from './connection/pingpong';\nexport { ReconnectionManager } from './connection/reconnection';\n\n// Create client instance with default settings\nexport function createWebSocketClient(options: WebSocketOptions): RNodeWebSocketClient {\n  return new RNodeWebSocketClient(options);\n}\n\n// Global objects for use on page\nif (typeof window !== 'undefined') {\n      // Global WebSocket client class\n    (window as any).RNodeWebSocketClient = RNodeWebSocketClient;\n  \n      // Global client creation function\n    (window as any).createWebSocketClient = createWebSocketClient;\n  \n      // Global utilities\n    (window as any).WebSocketUtils = WebSocketUtils;\n  \n      // Global logger\n    (window as any).WebSocketLogger = Logger;\n  (window as any).WebSocketLogLevel = LogLevel;\n  \n      // Check that class is actually available as constructor\n    console.log('🔌 RNode WebSocket Client глобально доступен на странице');\n  console.log('📖 Доступные глобальные объекты:');\n  console.log('   - window.RNodeWebSocketClient:', typeof (window as any).RNodeWebSocketClient);\n  console.log('   - window.createWebSocketClient():', typeof (window as any).createWebSocketClient);\n  console.log('   - window.WebSocketUtils:', typeof (window as any).WebSocketUtils);\n  console.log('   - window.WebSocketLogger:', typeof (window as any).WebSocketLogger);\n}\n\n"],"names":["LogLevel","ConnectionState"],"mappings":"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"}