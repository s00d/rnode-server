import { RNodeWebSocketClient } from './client';
import { Logger, LogLevel } from './logger';
import type {
  WebSocketOptions,
  WebSocketEvent,
  WebSocketMessage,
  RoomInfo,
  ConnectionInfo,
  ReconnectConfig,
  PingPongConfig
} from './types';

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
export function createWebSocketClient(options: WebSocketOptions) {
  return new RNodeWebSocketClient(options);
}

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å WebSocket
export const WebSocketUtils = {
  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ WebSocket –≤ –±—Ä–∞—É–∑–µ—Ä–µ
   */
  isSupported(): boolean {
    return typeof WebSocket !== 'undefined';
  },

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ
   */
  getStateString(state: number): string {
    switch (state) {
      case WebSocket.CONNECTING:
        return 'CONNECTING';
      case WebSocket.OPEN:
        return 'OPEN';
      case WebSocket.CLOSING:
        return 'CLOSING';
      case WebSocket.CLOSED:
        return 'CLOSED';
      default:
        return 'UNKNOWN';
    }
  },

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
   */
  generateClientId(): string {
    return `client_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  },

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è URL WebSocket
   */
  isValidUrl(url: string): boolean {
    try {
      const urlObj = new URL(url);
      return urlObj.protocol === 'ws:' || urlObj.protocol === 'wss:';
    } catch {
      return false;
    }
  }
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
if (typeof window !== 'undefined') {
  // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å WebSocket –∫–ª–∏–µ–Ω—Ç–∞ - —É–±–∏—Ä–∞–µ–º –¥–≤–æ–π–Ω—É—é –æ–±–µ—Ä—Ç–∫—É
  (window as any).RNodeWebSocketClient = RNodeWebSocketClient;
  
  // –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
  (window as any).createWebSocketClient = createWebSocketClient;
  
  // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
  (window as any).WebSocketUtils = WebSocketUtils;
  
  // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä
  (window as any).WebSocketLogger = Logger;
  (window as any).WebSocketLogLevel = LogLevel;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∞—Å—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–µ–Ω –∫–∞–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
  console.log('üîå RNode WebSocket Client –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ');
  console.log('üìñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã:');
  console.log('   - window.RNodeWebSocketClient:', typeof (window as any).RNodeWebSocketClient);
  console.log('   - window.createWebSocketClient():', typeof (window as any).createWebSocketClient);
  console.log('   - window.WebSocketUtils:', typeof (window as any).WebSocketUtils);
  console.log('   - window.WebSocketLogger:', typeof (window as any).WebSocketLogger);
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
  try {
    const testClient = new (window as any).RNodeWebSocketClient({ url: 'ws://test' });
    console.log('‚úÖ RNodeWebSocketClient —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∫–∞–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä');
  } catch (error) {
    console.error('‚ùå RNodeWebSocketClient –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–º:', error);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –º–æ–¥—É–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
export {
  RNodeWebSocketClient,
  Logger,
  LogLevel
};
