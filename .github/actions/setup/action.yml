name: 'Setup Neon'
description: 'Setup the Neon toolchain.'
inputs:
  platform:
    description: 'Platform being built for.'
    required: false
    default: ''
  use-rust:
    description: 'Install Rust?'
    required: false
    default: 'true'
  use-cross:
    description: 'Install cross-rs?'
    required: false
    default: 'false'
  workspace:
    description: 'Path to workspace being setup.'
    required: false
    default: '.'
outputs:
  rust:
    description: 'Rust version installed.'
    value: ${{ steps.rust.outputs.version }}
  node:
    description: 'Node version installed.'
    value: ${{ steps.node.outputs.version }}
  target:
    description: 'Rust target architecture installed.'
    value: ${{ steps.target.outputs.target }}
runs:
  using: "composite"
  steps:
    - name: Set Environment Variables
      uses: falti/dotenv-action@d1cd55661714e830a6e26f608f81d36e23424fed # v1.1.2
      with:
        path: ./.github/.env
        export-variables: true
        keys-case: bypass
    - name: Install Node
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        registry-url: ${{ env.NPM_REGISTRY }}
        cache: 'npm'
    # Cache Rust dependencies to speed up builds
    - name: Cache Rust Dependencies
      if: ${{ inputs['use-rust'] == 'true' }}
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    # Cache platform-specific dependencies for cross-compilation
    - name: Cache Platform-Specific Dependencies
      if: ${{ inputs['use-rust'] == 'true' && inputs.platform != '' }}
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ inputs.platform }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ inputs.platform }}-
          ${{ runner.os }}-cargo-
    - name: Install Dependencies
      shell: bash  
      run: npm ci
    # Cache Neon build artifacts to avoid rebuilding
    - name: Cache Neon Build Artifacts
      if: ${{ inputs['use-rust'] == 'true' }}
      uses: actions/cache@v3
      with:
        path: |
          index.node
          lib/
          platforms/
        key: ${{ runner.os }}-neon-${{ hashFiles('**/Cargo.lock', '**/package.json') }}
        restore-keys: |
          ${{ runner.os }}-neon-
    - name: Compute Rust Target
      if: ${{ inputs['use-rust'] == 'true' }}
      id: target
      shell: bash
      run: echo "target=$(npm exec neon list-platforms | jq -r '.["${{ inputs.platform }}"]')" >> $GITHUB_OUTPUT
      working-directory: ${{ inputs.workspace }}
    - name: Install Rust
      if: ${{ inputs['use-rust'] == 'true' }}
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ env.RUST_VERSION }}
        target: ${{ steps.target.outputs.target }}
        override: true
    - name: Install cross-rs
      if: ${{ inputs['use-cross'] == 'true' }}
      uses: baptiste0928/cargo-install@v2
      with:
        crate: cross
    # Cache cross-rs dependencies for cross-compilation
    - name: Cache Cross Dependencies
      if: ${{ inputs['use-cross'] == 'true' }}
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/cross
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-cross-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cross-
    - name: Node Version
      id: node
      shell: bash
      run: |
        echo "version=$(node -e 'console.log(process.versions.node)')" >> $GITHUB_OUTPUT
    - name: Rust Version
      if: ${{ inputs['use-rust'] == 'true' }}
      id: rust
      shell: bash
      run: |
        echo "version=$(cargo -Vv | fgrep release: | cut -d' ' -f2)" >> $GITHUB_OUTPUT
