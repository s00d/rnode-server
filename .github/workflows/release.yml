name: Release

run-name: |
  ${{ (inputs.dryrun && 'Dry run')
   || format('Release: {0}', (inputs.version == 'custom' && inputs.custom) || inputs.version) }}

on:
  workflow_dispatch:
    inputs:
      dryrun:
        description: 'Dry run (no npm publish)'
        required: false
        type: boolean
        default: true
      version:
        description: 'Version component to update (or "custom" to provide exact version)'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
          - prepatch
          - preminor
          - premajor
          - prerelease
          - custom
      custom:
        description: 'Custom version'
        required: false
        default: ''

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      dryrun: ${{ steps.dryrun.outputs.dryrun }}
      publish: ${{ steps.publish.outputs.publish }}
      ref: ${{ steps.tag.outputs.tag || github.event.repository.default_branch }}
      tag: ${{ steps.tag.outputs.tag || '' }}
    steps:
      - name: Validate Workflow Inputs
        if: ${{ inputs.version == 'custom' && inputs.custom == '' }}
        shell: bash
        run: |
          echo '::error::No custom version number provided'
          exit 1
      - id: dryrun
        name: Validate Dry Run Event
        if: ${{ inputs.dryrun }}
        shell: bash
        run: echo "dryrun=true" >> $GITHUB_OUTPUT
      - id: publish
        name: Validate Publish Event
        if: ${{ !inputs.dryrun }}
        shell: bash
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          if [[ -z $NPM_TOKEN ]]; then
            echo "::error::Secret NPM_TOKEN is not defined for this GitHub repo."
            echo "::error::To publish to npm, this action requires:"
            echo "::error:: • an npm access token;"
            echo "::error:: • with Read-Write access to this project's npm packages;"
            echo "::error:: • stored as a repo secret named NPM_TOKEN."
            echo "::error::See https://docs.npmjs.com/about-access-tokens for info about creating npm tokens."
            echo "::error:: 💡 The simplest method is to create a Classic npm token of type Automation."
            echo "::error:: 💡 For greater security, consider using a Granual access token."
            echo "::error::See https://docs.github.com/en/actions/security-guides/using-secrets-in-github-actions for info about how to store GitHub repo secrets."
            exit 1
          fi
          echo "publish=true" >> $GITHUB_OUTPUT
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Setup Neon Environment
        uses: ./.github/actions/setup
        with:
          use-rust: false
      - name: Tag Release
        if: ${{ !inputs.dryrun }}
        id: tag
        shell: bash
        run: |
          git config --global user.name $ACTIONS_USER
          git config --global user.email $ACTIONS_EMAIL
          npm version -m 'v%s' '${{ (inputs.version == 'custom' && inputs.custom) || inputs.version }}'
          git push --follow-tags
          echo "tag=$(git describe --abbrev=0)" >> $GITHUB_OUTPUT

  build:
    name: Build
    needs: [setup]
    permissions:
      contents: write
    uses: ./.github/workflows/build.yml
    with:
      ref: ${{ needs.setup.outputs.ref }}
      tag: ${{ needs.setup.outputs.tag }}
      update-version: ${{ !!needs.setup.outputs.dryrun }}
      version: ${{ (inputs.version == 'custom' && inputs.custom) || inputs.version }}
      github-release: ${{ !!needs.setup.outputs.publish }}

  publish:
    name: Publish
    if: ${{ needs.setup.outputs.publish }}
    needs: [setup, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.setup.outputs.ref }}
      - name: Setup Neon Environment
        uses: ./.github/actions/setup
        with:
          use-rust: false
      - name: Fetch Main Package
        uses: robinraju/release-downloader@c39a3b234af58f0cf85888573d361fb6fa281534 # v1.10
        with:
          tag: ${{ needs.setup.outputs.tag }}
          fileName: "*.tgz"
          out-file-path: ./dist

      - name: Publish Main Package
        shell: bash
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "Publishing main package..."
          for p in ./dist/*.tgz ; do
            npm publish --access public --no-git-checks $p
          done

      - name: Update Package Versions
        shell: bash
        run: |
          echo "Updating package versions..."
          VERSION='${{ (inputs.version == 'custom' && inputs.custom) || inputs.version }}'

          # Update versions in all packages
          for pkg in packages/*/; do
            if [ -f "$pkg/package.json" ]; then
              PKG_PATH="${pkg%/}"
              PKG_NAME=$(basename "$PKG_PATH")

              echo "📦 Updating version for package: $PKG_NAME"
              cd "$PKG_PATH"

              # Update version in package.json
              npm version --no-git-tag-version "$VERSION"

              echo "✅ Updated $PKG_NAME to version $VERSION"
              cd - > /dev/null
            fi
          done

          echo "🎉 All package versions updated successfully!"

      - name: Publish Packages
        shell: bash
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "Publishing packages..."
          
          # Process all packages
          for pkg in packages/*/; do
            if [ -f "$pkg/package.json" ]; then
              # Remove trailing slash from path
              PKG_PATH="${pkg%/}"
              PKG_NAME=$(basename "$PKG_PATH")
              
              echo "📦 Processing package: $PKG_NAME"
              echo "📁 Package path: $PKG_PATH"
              
              # Change to package directory
              cd "$PKG_PATH"
              
              # Build package
              echo "🔨 Building $PKG_NAME..."
              npm run build
              
              # Publish package
              echo "🚀 Publishing $PKG_NAME..."
              if npm publish --access public --no-git-checks 2>&1 | grep -q "You cannot publish over the previously published versions"; then
                echo "⚠️  Version already exists, skipping publication for $PKG_NAME"
              else
                echo "✅ Successfully published $PKG_NAME"
              fi
              
              # Return to root directory
              cd - > /dev/null
            fi
          done
          
          echo "🎉 All packages published successfully!"
