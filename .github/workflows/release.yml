name: Release

run-name: |
  ${{ (inputs.dryrun && 'Dry run')
   || format('Release: {0}', (inputs.version == 'custom' && inputs.custom) || inputs.version) }}

on:
  workflow_dispatch:
    inputs:
      dryrun:
        description: 'Dry run (no npm publish)'
        required: false
        type: boolean
        default: true
      version:
        description: 'Version component to update (or "custom" to provide exact version)'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
          - prepatch
          - preminor
          - premajor
          - prerelease
          - custom
      custom:
        description: 'Custom version'
        required: false
        default: ''

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      dryrun: ${{ steps.dryrun.outputs.dryrun }}
      publish: ${{ steps.publish.outputs.publish }}
      ref: ${{ steps.tag.outputs.tag || github.event.repository.default_branch }}
      tag: ${{ steps.tag.outputs.tag || '' }}
    steps:
      - name: Validate Workflow Inputs
        if: ${{ inputs.version == 'custom' && inputs.custom == '' }}
        shell: bash
        run: |
          echo '::error::No custom version number provided'
          exit 1
      - id: dryrun
        name: Validate Dry Run Event
        if: ${{ inputs.dryrun }}
        shell: bash
        run: echo "dryrun=true" >> $GITHUB_OUTPUT
      - id: publish
        name: Validate Publish Event
        if: ${{ !inputs.dryrun }}
        shell: bash
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          if [[ -z $NPM_TOKEN ]]; then
            echo "::error::Secret NPM_TOKEN is not defined for this GitHub repo."
            echo "::error::To publish to npm, this action requires:"
            echo "::error:: ‚Ä¢ an npm access token;"
            echo "::error:: ‚Ä¢ with Read-Write access to this project's npm packages;"
            echo "::error:: ‚Ä¢ stored as a repo secret named NPM_TOKEN."
            echo "::error::See https://docs.npmjs.com/about-access-tokens for info about creating npm tokens."
            echo "::error:: üí° The simplest method is to create a Classic npm token of type Automation."
            echo "::error:: üí° For greater security, consider using a Granual access token."
            echo "::error::See https://docs.github.com/en/actions/security-guides/using-secrets-in-github-actions for info about how to store GitHub repo secrets."
            exit 1
          fi
          echo "publish=true" >> $GITHUB_OUTPUT
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Setup Neon Environment
        uses: ./.github/actions/setup
        with:
          use-rust: false
      - name: Tag Release
        if: ${{ !inputs.dryrun }}
        id: tag
        shell: bash
        run: |
          git config --global user.name $ACTIONS_USER
          git config --global user.email $ACTIONS_EMAIL
          npm version -m 'v%s' '${{ (inputs.version == 'custom' && inputs.custom) || inputs.version }}'
          git push --follow-tags
          echo "tag=$(git describe --abbrev=0)" >> $GITHUB_OUTPUT

  build:
    name: Build
    needs: [setup]
    permissions:
      contents: write
    uses: ./.github/workflows/build.yml
    with:
      ref: ${{ needs.setup.outputs.ref }}
      tag: ${{ needs.setup.outputs.tag }}
      update-version: ${{ !!needs.setup.outputs.dryrun }}
      version: ${{ (inputs.version == 'custom' && inputs.custom) || inputs.version }}
      github-release: ${{ !!needs.setup.outputs.publish }}

  # build-packages:
  #   name: Build Packages
  #   if: ${{ needs.setup.outputs.publish }}
  #   needs: [setup]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v3
  #       with:
  #         ref: ${{ needs.setup.outputs.ref }}
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'
  #         cache: 'npm'
  #     - name: Install Dependencies
  #       run: |
  #         npm ci
  #     - name: Update Package Versions
  #       run: |
  #         # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ package.json
  #         NEW_VERSION=$(node -p "require('./package.json').version")
  #         echo "Updating all packages to version: $NEW_VERSION"
          
  #         # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏–∏ –≤—Å–µ—Ö –ø–∞–∫–µ—Ç–æ–≤
  #         for pkg in packages/*/; do
  #           if [ -f "$pkg/package.json" ]; then
  #             echo "Updating version in $pkg"
  #             # –£–±–∏—Ä–∞–µ–º –∑–∞–≤–µ—Ä—à–∞—é—â–∏–π —Å–ª–µ—à –∏–∑ –ø—É—Ç–∏
  #             PKG_PATH="${pkg%/}"
  #             npm version $NEW_VERSION --prefix "$PKG_PATH" --no-git-tag-version
  #           fi
  #         done
  #     - name: Build Packages
  #       run: |
  #         # –°–æ–±–∏—Ä–∞–µ–º –∫–∞–∂–¥—ã–π –ø–∞–∫–µ—Ç
  #         for pkg in packages/*/; do
  #           if [ -f "$pkg/package.json" ]; then
  #             echo "Building $pkg"
  #             # –£–±–∏—Ä–∞–µ–º –∑–∞–≤–µ—Ä—à–∞—é—â–∏–π —Å–ª–µ—à –∏–∑ –ø—É—Ç–∏
  #             PKG_PATH="${pkg%/}"
  #             npm run build --prefix "$PKG_PATH"
  #           fi
  #         done
  #     - name: Pack Packages
  #       run: |
  #         mkdir -p dist-packages
  #         # –£–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ø–∞–∫–µ—Ç
  #         for pkg in packages/*/; do
  #           if [ -f "$pkg/package.json" ]; then
  #             echo "Packing $pkg"
  #             # –£–±–∏—Ä–∞–µ–º –∑–∞–≤–µ—Ä—à–∞—é—â–∏–π —Å–ª–µ—à –∏–∑ –ø—É—Ç–∏
  #             PKG_PATH="${pkg%/}"
  #             echo "Package path: $PKG_PATH"
  #             echo "Current directory: $(pwd)"
  #             echo "Package.json exists: $(test -f "$PKG_PATH/package.json" && echo "yes" || echo "no")"
              
  #             # –ü–æ–ø—Ä–æ–±—É–µ–º —É–ø–∞–∫–æ–≤–∞—Ç—å —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ñ–ª–∞–≥–∞–º–∏
  #             npm pack "$PKG_PATH" --silent --pack-destination=./dist-packages --no-git-checks --ignore-scripts || {
  #               echo "Failed to pack with npm pack, trying alternative approach..."
  #               # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - —Å–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ –≤—Ä—É—á–Ω—É—é
  #               cd "$PKG_PATH"
  #               tar -czf "../../dist-packages/$(basename "$PKG_PATH").tgz" --exclude=node_modules --exclude=.git .
  #               cd - > /dev/null
  #             }
  #           fi
  #         done
  #     - name: Validate Packages
  #       run: |
  #         echo "Validating packages for publication..."
  #         for pkg in packages/*/; do
  #           if [ -f "$pkg/package.json" ]; then
  #             echo "Validating $pkg"
  #             # –£–±–∏—Ä–∞–µ–º –∑–∞–≤–µ—Ä—à–∞—é—â–∏–π —Å–ª–µ—à –∏–∑ –ø—É—Ç–∏
  #             PKG_PATH="${pkg%/}"
  #             echo "Package path for validation: $PKG_PATH"
              
  #             # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–∫–µ—Ç –≥–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
  #             npm publish --dry-run --prefix "$PKG_PATH" --no-git-checks --ignore-scripts || {
  #               echo "Validation failed, but continuing..."
  #             }
              
  #             # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–∫–µ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π scope
  #             PACKAGE_NAME=$(node -p "require('$PKG_PATH/package.json').name")
  #             echo "Package name: $PACKAGE_NAME"
  #             if [[ $PACKAGE_NAME != @rnode/* ]]; then
  #               echo "‚ùå Error: Package $PACKAGE_NAME does not use @rnode scope"
  #               exit 1
  #             fi
  #             echo "‚úÖ Package $PACKAGE_NAME has correct scope"
  #           fi
  #         done
  #     - name: Upload Package Artifacts
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: packages
  #         path: dist-packages/
  #         retention-days: 1

  publish:
    name: Publish
    if: ${{ needs.setup.outputs.publish }}
    needs: [setup, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.setup.outputs.ref }}
      - name: Setup Neon Environment
        uses: ./.github/actions/setup
        with:
          use-rust: false
      - name: Fetch Main Package
        uses: robinraju/release-downloader@c39a3b234af58f0cf85888573d361fb6fa281534 # v1.10
        with:
          tag: ${{ needs.setup.outputs.tag }}
          fileName: "*.tgz"
          out-file-path: ./dist
      - name: Download Package Artifacts
        uses: actions/download-artifact@v4
        with:
          name: packages
          path: ./dist-packages
      - name: Publish Main Package
        shell: bash
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "Publishing main package..."
          for p in ./dist/*.tgz ; do
            npm publish --access public --no-git-checks $p
          done
      - name: Publish Packages
        shell: bash
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "Publishing packages..."
          for p in ./dist-packages/*.tgz ; do
            echo "Publishing $p"
            PACKAGE_NAME=$(basename "$p" .tgz)
            echo "Package: $PACKAGE_NAME"
            npm publish --access public --no-git-checks "$p"
            echo "‚úÖ Successfully published $PACKAGE_NAME"
          done
          echo "üéâ All packages published successfully!"
