use std::collections::HashMap;
use std::sync::OnceLock;
use tokio::sync::RwLock;
use uuid::Uuid;
use serde_json;
use chrono;
use log;

use crate::websocket::{Room, WebSocketConnection};

// –§—É–Ω–∫—Ü–∏—è get_connection_info –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏ —É–¥–∞–ª–µ–Ω–∞ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –∫–æ–¥–∞

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–æ–º–Ω–∞—Ç –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
static WEBSOCKET_ROOMS: OnceLock<RwLock<HashMap<String, Room>>> = OnceLock::new();
static WEBSOCKET_CONNECTIONS: OnceLock<RwLock<HashMap<Uuid, WebSocketConnection>>> = OnceLock::new();

// –ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π (—Å–æ–∑–¥–∞—é—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏)
pub fn get_websocket_rooms() -> &'static RwLock<HashMap<String, Room>> {
    WEBSOCKET_ROOMS.get_or_init(|| RwLock::new(HashMap::new()))
}

pub fn get_websocket_connections() -> &'static RwLock<HashMap<Uuid, WebSocketConnection>> {
    log::debug!("üîç get_websocket_connections called");
    let result = WEBSOCKET_CONNECTIONS.get_or_init(|| {
        log::debug!("üÜï Initializing WEBSOCKET_CONNECTIONS");
        RwLock::new(HashMap::new())
    });
    log::debug!("‚úÖ get_websocket_connections returned");
    result
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–º–Ω–∞—Ç–∞–º–∏
pub async fn join_room(connection_id: &Uuid, room_id: &str) -> bool {
    log::debug!("üîç Attempting to join room {} for connection {}", room_id, connection_id);
    
    let mut rooms = get_websocket_rooms().write().await;
    let mut connections = get_websocket_connections().write().await;
    
    log::debug!("üìä Found {} rooms, {} connections", rooms.len(), connections.len());
    
    if let Some(room) = rooms.get_mut(room_id) {
        log::debug!("‚úÖ Room {} found", room_id);
        if let Some(conn) = connections.get_mut(connection_id) {
            log::debug!("‚úÖ Connection {} found", connection_id);
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–º–Ω–∞—Ç—É
            if !room.connections.contains(connection_id) {
                room.connections.push(*connection_id);
                conn.room_id = Some(room_id.to_string());
                log::debug!("‚úÖ Successfully joined room {} for connection {}", room_id, connection_id);
                return true;
            } else {
                log::debug!("‚ö†Ô∏è Connection {} already in room {}", connection_id, room_id);
            }
        } else {
            log::error!("‚ùå Connection {} not found", connection_id);
        }
    } else {
        log::error!("‚ùå Room {} not found", room_id);
        log::debug!("üìã Available rooms: {:?}", rooms.keys().collect::<Vec<_>>());
    }
    
    false
}

pub async fn leave_room(connection_id: &Uuid, room_id: &str) -> bool {
    let mut rooms = get_websocket_rooms().write().await;
    let mut connections = get_websocket_connections().write().await;
    
    if let Some(room) = rooms.get_mut(room_id) {
        room.connections.retain(|&id| id != *connection_id);
    }
    
    if let Some(conn) = connections.get_mut(connection_id) {
        conn.room_id = None;
    }
    
    true
}

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã
pub async fn create_room(room_id: &str, name: &str, _metadata: Option<serde_json::Value>) -> bool {
    let mut rooms = get_websocket_rooms().write().await;
    
    if rooms.contains_key(room_id) {
        log::warn!("‚ö†Ô∏è Room {} already exists", room_id);
        return false;
    }
    
    let room = Room {
        id: room_id.to_string(),
        name: name.to_string(),
        description: None,
        max_connections: None,
        connections: Vec::new(),
        metadata: HashMap::new(),
        created_at: chrono::Utc::now(),
    };
    
    rooms.insert(room_id.to_string(), room);
    log::info!("‚úÖ Room {} created: {}", room_id, name);
    true
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–Ω–∞—Ç–µ
pub async fn get_room_info(room_id: &str) -> Option<Room> {
    let rooms = get_websocket_rooms().read().await;
    rooms.get(room_id).cloned()
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç
pub async fn get_all_rooms() -> Vec<Room> {
    let rooms = get_websocket_rooms().read().await;
    rooms.values().cloned().collect()
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
pub async fn get_user_rooms(connection_id: &Uuid) -> Vec<String> {
    let connections = get_websocket_connections().read().await;
    if let Some(conn) = connections.get(connection_id) {
        if let Some(room_id) = &conn.room_id {
            vec![room_id.clone()]
        } else {
            Vec::new()
        }
    } else {
        Vec::new()
    }
}
