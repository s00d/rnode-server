use crate::middleware::execute_middleware;
use crate::types::get_event_queue;
use base64::Engine;
use futures::stream::{self};
use multer::Multipart;
use neon::prelude::*;
use serde_json;
use std::convert::Infallible;

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ
#[derive(Debug)]
struct FileInfo {
    filename: String,
    content_type: String,
    size: usize,
    data: String, // Base64 encoded data
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ multipart
type MultipartResult = Result<
    (
        std::collections::HashMap<String, String>,
        std::collections::HashMap<String, FileInfo>,
    ),
    Box<dyn std::error::Error>,
>;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ multipart/form-data
async fn parse_multipart_data(
    body_bytes: axum::body::Bytes,
    content_type: &str,
) -> MultipartResult {
    // –ü–æ–ª—É—á–∞–µ–º boundary –∏–∑ content-type
    let boundary = content_type
        .split("boundary=")
        .nth(1)
        .ok_or("No boundary found")?;

    // –°–æ–∑–¥–∞–µ–º stream –∏–∑ bytes
    let stream =
        stream::once(async move { Result::<axum::body::Bytes, Infallible>::Ok(body_bytes) });

    // –°–æ–∑–¥–∞–µ–º Multipart –∏–∑ stream –∏ boundary
    let mut multipart = Multipart::new(stream, boundary);

    let mut fields = std::collections::HashMap::new();
    let mut files = std::collections::HashMap::new();

    // –ü–∞—Ä—Å–∏–º multipart –¥–∞–Ω–Ω—ã–µ
    while let Some(field) = multipart.next_field().await? {
        let field_name = field.name().unwrap_or("unknown").to_string();

        if let Some(filename) = field.file_name() {
            // –≠—Ç–æ —Ñ–∞–π–ª
            let filename = filename.to_string();
            let field_content_type = field
                .content_type()
                .map(|ct| ct.to_string())
                .unwrap_or_else(|| "application/octet-stream".to_string());

            // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            let data = field.bytes().await?;
            let size = data.len();

            // –ö–æ–¥–∏—Ä—É–µ–º –≤ Base64 –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ JSON
            let data_base64 = base64::engine::general_purpose::STANDARD.encode(&data);

            let file_info = FileInfo {
                filename,
                content_type: field_content_type,
                size,
                data: data_base64,
            };

            files.insert(field_name, file_info);
        } else {
            // –≠—Ç–æ –æ–±—ã—á–Ω–æ–µ –ø–æ–ª–µ —Ñ–æ—Ä–º—ã
            let value = field.text().await?;
            fields.insert(field_name, value);
        }
    }

    Ok((fields, files))
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ - –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ JavaScript
pub fn process_http_request(mut cx: FunctionContext) -> JsResult<JsString> {
    let method = cx.argument::<JsString>(0)?.value(&mut cx);
    let path = cx.argument::<JsString>(1)?.value(&mut cx);

    // –í—ã–∑—ã–≤–∞–µ–º JavaScript —Ñ—É–Ω–∫—Ü–∏—é getHandler(method, path)
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    let result = format!("Processing {} {} in JavaScript", method, path);

    Ok(cx.string(result))
}

// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
pub async fn dynamic_handler(
    req: axum::extract::Request,
    actual_path: String, // –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π –ø—É—Ç—å
    registered_path: String,
    method: String,
    _handler_id: String,
) -> axum::response::Response<axum::body::Body> {
    println!("üîç Dynamic handler called:");
    println!("  Method: {}", method);
    println!("  Actual path: {}", actual_path);
    println!("  Registered path: {}", registered_path);
    println!("  Handler ID: {}", _handler_id);
    use axum::body::Body;
    use axum::http::StatusCode;
    use axum::response::Response;

    // –†–∞–∑—Ä—É—à–∞–µ–º Request –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è body
    let (parts, body) = req.into_parts();

    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É–∂–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã —á–µ—Ä–µ–∑ Axum —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä—ã
    let uri = parts.uri.clone();
    let query_string = uri.query().unwrap_or("");

    // –ò–∑–≤–ª–µ–∫–∞–µ–º cookies –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    let cookies = parts
        .headers
        .get("cookie")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("")
        .to_string();

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    let mut headers_json = serde_json::Map::new();
    for (key, value) in &parts.headers {
        let key_str = key.as_str().to_string();
        if let Ok(value_str) = value.to_str() {
            headers_json.insert(key_str, serde_json::Value::String(value_str.to_string()));
        }
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º Content-Type –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
    let content_type = parts
        .headers
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("")
        .to_string();

    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º bytes –∏–∑ body
    let body_bytes = match axum::body::to_bytes(body, usize::MAX).await {
        Ok(bytes) => bytes,
        Err(_) => axum::body::Bytes::new(),
    };

    // –ü–∞—Ä—Å–∏–º body –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç Content-Type
    let (body_data, files_data) = if content_type.contains("multipart/form-data") {
        // –ü–∞—Ä—Å–∏–º multipart/form-data
        match parse_multipart_data(body_bytes.clone(), &content_type).await {
            Ok((fields, files)) => {
                // –°–æ–∑–¥–∞–µ–º JSON –¥–ª—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
                let mut fields_json = serde_json::Map::new();
                for (key, value) in fields {
                    fields_json.insert(key, serde_json::Value::String(value));
                }

                // –°–æ–∑–¥–∞–µ–º JSON –¥–ª—è —Ñ–∞–π–ª–æ–≤
                let mut files_json = serde_json::Map::new();
                for (key, file_info) in files {
                    let mut file_json = serde_json::Map::new();
                    file_json.insert(
                        "filename".to_string(),
                        serde_json::Value::String(file_info.filename),
                    );
                    file_json.insert(
                        "contentType".to_string(),
                        serde_json::Value::String(file_info.content_type),
                    );
                    file_json.insert(
                        "size".to_string(),
                        serde_json::Value::Number(serde_json::Number::from(file_info.size)),
                    );
                    file_json.insert(
                        "data".to_string(),
                        serde_json::Value::String(file_info.data),
                    );
                    files_json.insert(key, serde_json::Value::Object(file_json));
                }

                (
                    serde_json::Value::Object(fields_json),
                    serde_json::Value::Object(files_json),
                )
            }
            Err(_) => {
                // Fallback –∫ –æ–±—ã—á–Ω–æ–º—É body
                let body_string = String::from_utf8_lossy(&body_bytes).to_string();
                (
                    serde_json::Value::String(body_string),
                    serde_json::Value::Null,
                )
            }
        }
    } else {
        // –û–±—ã—á–Ω—ã–π body (JSON, form-urlencoded, plain text)
        let body_string = String::from_utf8_lossy(&body_bytes).to_string();
        (
            serde_json::Value::String(body_string),
            serde_json::Value::Null,
        )
    };

    // –°–æ–∑–¥–∞–µ–º JSON –æ–±—ä–µ–∫—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    let mut request_data = serde_json::Map::new();
    request_data.insert(
        "method".to_string(),
        serde_json::Value::String(method.clone()),
    );
    request_data.insert(
        "registeredPath".to_string(),
        serde_json::Value::String(registered_path.clone()),
    );
    request_data.insert(
        "path".to_string(),
        serde_json::Value::String(actual_path.clone()),
    ); // –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å –¥–ª—è req.url
    request_data.insert("body".to_string(), body_data); // Body –∑–∞–ø—Ä–æ—Å–∞ (–ø–æ–ª—è —Ñ–æ—Ä–º—ã –∏–ª–∏ –æ–±—ã—á–Ω—ã–π body)
    request_data.insert("files".to_string(), files_data); // –§–∞–π–ª—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
    request_data.insert(
        "contentType".to_string(),
        serde_json::Value::String(content_type),
    ); // Content-Type
    request_data.insert("cookies".to_string(), serde_json::Value::String(cookies)); // Cookies –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    request_data.insert(
        "headers".to_string(),
        serde_json::Value::Object(headers_json),
    ); // –í—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏

    // –ò–∑–≤–ª–µ–∫–∞–µ–º path –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, :id -> 123 –∏–ª–∏ {*filepath} -> documents/2024/january/record.png)
    let mut path_params_json = serde_json::Map::new();
    let actual_segments: Vec<&str> = actual_path.split('/').collect();
    let registered_segments: Vec<&str> = registered_path.split('/').collect();

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–∏–ø–∞ :id
    if actual_segments.len() == registered_segments.len() {
        for (i, registered_seg) in registered_segments.iter().enumerate() {
            if registered_seg.starts_with(':') && i < actual_segments.len() {
                let param_name = &registered_seg[1..]; // –£–±–∏—Ä–∞–µ–º :
                let param_value = actual_segments[i];
                path_params_json.insert(
                    param_name.to_string(),
                    serde_json::Value::String(param_value.to_string()),
                );
            }
        }
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º wildcard –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–∏–ø–∞ {*filepath}
    for (i, registered_seg) in registered_segments.iter().enumerate() {
        if registered_seg.contains("{*") && registered_seg.ends_with("}") {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏–∑ {*param}
            let param_name = registered_seg
                .trim_start_matches("{*")
                .trim_end_matches("}");

            if i < actual_segments.len() {
                // –î–ª—è wildcard –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –±–µ—Ä–µ–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–µ–≥–º–µ–Ω—Ç—ã
                let param_value = actual_segments[i..].join("/");
                if !param_value.is_empty() {
                    println!(
                        "üìÅ Wildcard –ø–∞—Ä–∞–º–µ—Ç—Ä {{*{}}}: '{}'",
                        param_name, param_value
                    );
                    path_params_json.insert(
                        param_name.to_string(),
                        serde_json::Value::String(param_value),
                    );
                }
            }
        }
    }

    // –ü–∞—Ä—Å–∏–º query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    let mut query_params_json = serde_json::Map::new();
    if !query_string.is_empty() {
        for pair in query_string.split('&') {
            if let Some((key, value)) = pair.split_once('=') {
                query_params_json.insert(
                    key.to_string(),
                    serde_json::Value::String(value.to_string()),
                );
            }
        }
    }

    request_data.insert(
        "pathParams".to_string(),
        serde_json::Value::Object(path_params_json.clone()),
    );
    request_data.insert(
        "queryParams".to_string(),
        serde_json::Value::Object(query_params_json.clone()),
    );

    // –í—ã–ø–æ–ª–Ω—è–µ–º middleware –ø–æ—Å–ª–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    match execute_middleware(&mut request_data).await {
        Ok(()) => (), // Middleware —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω, request_data –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
        Err(middleware_response) => return middleware_response,
    };

    let request_json = serde_json::to_string(&request_data).unwrap();

    // –ö–ª–æ–Ω–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ JavaScript
    let request_json_clone = request_json.clone();

    // –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    let (tx, rx) = std::sync::mpsc::channel();

    let event_queue = get_event_queue();
    let channel = {
        let event_queue_map = event_queue.read().unwrap();
        event_queue_map.clone()
    };

    if let Some(channel) = channel {
        let _join_handle = channel.send(move |mut cx| {
            // –í—ã–∑—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é getHandler
            let global: Handle<JsObject> = cx.global("global")?;
            let get_handler_fn: Handle<JsFunction> = global.get(&mut cx, "getHandler")?;

            // –í—ã–∑—ã–≤–∞–µ–º getHandler(requestJson)
            let result: Handle<JsString> = get_handler_fn
                .call_with(&mut cx)
                .arg(cx.string(&request_json_clone))
                .apply(&mut cx)?;

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ HTTP –ø–æ—Ç–æ–∫
            let _ = tx.send(result.value(&mut cx));
            Ok(())
        });

        // –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç JavaScript
        let result = match rx.recv_timeout(std::time::Duration::from_millis(1000)) {
            Ok(result) => result,
            Err(_) => format!(
                "Timeout waiting for JavaScript handler: {} {}",
                method, registered_path
            ),
        };

        // –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç –æ—Ç JavaScript
        let response_json_value: serde_json::Value = serde_json::from_str(&result).unwrap_or_else(|_| {
            serde_json::json!({"content": format!("Failed to parse JS response: {}", result), "contentType": "text/plain"})
        });

        let response_text = response_json_value["content"]
            .as_str()
            .unwrap_or("")
            .to_string();
        let content_type = response_json_value["contentType"]
            .as_str()
            .unwrap_or("text/plain")
            .to_string();

        // –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        let mut response_builder = Response::builder().header("content-type", content_type);

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–¥ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ JavaScript –æ—Ç–≤–µ—Ç–∞
        let mut status_code = StatusCode::OK;
        if let Some(headers) = response_json_value["headers"].as_object() {
            if let Some(status_str) = headers.get("status").and_then(|v| v.as_str()) {
                if let Ok(status_u16) = status_str.parse::<u16>() {
                    status_code = StatusCode::from_u16(status_u16).unwrap_or(StatusCode::OK);
                }
            }
        }
        response_builder = response_builder.status(status_code);

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ JavaScript –æ—Ç–≤–µ—Ç–∞ (–∏—Å–∫–ª—é—á–∞—è —Å–ª—É–∂–µ–±–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ status)
        if let Some(headers) = response_json_value["headers"].as_object() {
            for (key, value) in headers {
                if key != "status" {
                    // –ò—Å–∫–ª—é—á–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ status
                    if let Some(value_str) = value.as_str() {
                        response_builder = response_builder.header(key, value_str);
                    } else if let Some(value_array) = value.as_array() {
                        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Å—Å–∏–≤—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Set-Cookie)
                        for item in value_array {
                            if let Some(item_str) = item.as_str() {
                                response_builder = response_builder.header(key, item_str);
                            }
                        }
                    }
                }
            }
        }

        response_builder.body(Body::from(response_text)).unwrap()
    } else {
        // Channel –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
        let response_text = format!("No channel available for {} {}", method, registered_path);

        Response::builder()
            .status(StatusCode::INTERNAL_SERVER_ERROR)
            .header("content-type", "text/plain")
            .body(Body::from(response_text))
            .unwrap()
    }
}
