use crate::handlers::dynamic_handler;
use crate::static_files::handle_static_file;
use crate::types::{get_download_routes, get_event_queue, get_routes, get_upload_routes};
use axum::{
    Router,
    routing::{delete, get, patch, post, put},
};
use futures::stream::{self};
use mime_guess::MimeGuess;
use multer::Multipart;
use neon::prelude::*;
use serde_json;
use std::net::SocketAddr;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
pub fn start_listen(mut cx: FunctionContext) -> JsResult<JsUndefined> {
    let port = cx.argument::<JsNumber>(0)?.value(&mut cx) as u16;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç (—Ö–æ—Å—Ç)
    let host = if cx.len() > 1 {
        if let Ok(host_arg) = cx.argument::<JsString>(1) {
            let host_str = host_arg.value(&mut cx);
            // –ü–∞—Ä—Å–∏–º IP –∞–¥—Ä–µ—Å
            let ip_parts: Result<Vec<u8>, _> =
                host_str.split('.').map(|part| part.parse::<u8>()).collect();

            match ip_parts {
                Ok(parts) if parts.len() == 4 => Some([parts[0], parts[1], parts[2], parts[3]]),
                _ => {
                    println!("Invalid IP address: {}, using localhost", host_str);
                    Some([127, 0, 0, 1])
                }
            }
        } else {
            Some([127, 0, 0, 1])
        }
    } else {
        Some([127, 0, 0, 1])
    };

    let host = host.unwrap();
    println!(
        "Starting server on {}:{}",
        host.iter()
            .map(|b| b.to_string())
            .collect::<Vec<_>>()
            .join("."),
        port
    );

    // –°–æ–∑–¥–∞–µ–º Channel –¥–ª—è —Å–≤—è–∑–∏ —Å JavaScript
    let queue = cx.channel();

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º Channel –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    {
        let event_queue_guard = get_event_queue();
        let mut event_queue_map = event_queue_guard.write().unwrap();
        *event_queue_map = Some(queue);
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π HTTP —Å–µ—Ä–≤–µ—Ä
    std::thread::spawn(move || {
        let rt = tokio::runtime::Runtime::new().unwrap();
        rt.block_on(async {
            // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ä–æ—É—Ç–µ—Ä
            let mut app = Router::new();
            
            // –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã
            let routes = get_routes();
            let routes_map = routes.read().unwrap();
            
            // –°–æ–∑–¥–∞–µ–º –∫–ª–æ–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∑–∞–º—ã–∫–∞–Ω–∏—è—Ö
            let routes_vec: Vec<(String, String, String)> = routes_map.iter()
                .map(|(_, route_info)| (route_info.path.clone(), route_info.method.clone(), route_info.handler_id.clone()))
                .collect();

            println!("Routes found: {:?}", routes_vec);
            
            for (path, method, handler_id) in routes_vec {
                let path_clone = path.clone();
                let method_clone = method.clone();
                let handler_id_clone = handler_id.clone();
                
                let handler_fn = move |req: axum::extract::Request| {
                    let registered_path = path_clone.clone();
                    let method = method_clone.clone();
                    let handler_id = handler_id_clone.clone();
                    async move { 
                        // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
                        let actual_path = req.uri().path().to_string();
                        dynamic_handler(req, actual_path, registered_path, method, handler_id).await 
                    }
                };
                
                match method.as_str() {
                    "GET" => app = app.route(&path, get(handler_fn)),
                    "POST" => app = app.route(&path, post(handler_fn)),
                    "PUT" => app = app.route(&path, put(handler_fn)),
                    "DELETE" => app = app.route(&path, delete(handler_fn)),
                    "PATCH" => app = app.route(&path, patch(handler_fn)),
                    _ => {}
                }
            }
            
            let addr = SocketAddr::from(([127, 0, 0, 1], port));
            println!("Server listening on http://{}", addr);
            println!("Registered dynamic routes:");
            for (_, route_info) in routes_map.iter() {
                println!("  {} {}", route_info.method, route_info.path);
            }
            
            // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Å–µ—Ä–≤–µ—Ä–∞
            drop(routes_map);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Ä–æ—É—Ç—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
            let download_routes = get_download_routes();
            let download_routes_map = download_routes.read().unwrap();
            
            for (route_path, config) in download_routes_map.iter() {
                let config_clone = config.clone();
                let route_path_clone = route_path.clone();
                
                let download_handler = move |req: axum::extract::Request| {
                    let config = config_clone.clone();
                    let route_path = route_path_clone.clone();
                    async move {
                        // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ {*name} –∏–ª–∏ –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ ?path=
                        let actual_filename = {
                            let mut result = None;
                            
                            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä {*name} –∏–∑ –ø—É—Ç–∏
                            if route_path.contains("{*name}") {
                                // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ URL
                                let path_parts: Vec<&str> = req.uri().path().split('/').collect();
                                if path_parts.len() >= 3 {
                                    let filename = path_parts[2..].join("/");
                                    if !filename.is_empty() {
                                        println!("üìÅ –§–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ {{*name}}: '{}'", filename);
                                        result = Some(filename);
                                    }
                                }
                            }
                            
                            // –ï—Å–ª–∏ –∏–º—è —Ñ–∞–π–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ø—É—Ç–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º query –ø–∞—Ä–∞–º–µ—Ç—Ä ?path=
                            if result.is_none() {
                                if let Some(query) = req.uri().query() {
                                    let query_parts: Vec<&str> = query.split('&').collect();
                                    for part in query_parts {
                                        if part.starts_with("path=") {
                                            let path_value = &part[5..]; // –£–±–∏—Ä–∞–µ–º "path="
                                            if !path_value.is_empty() {
                                                // –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL-encoded –∑–Ω–∞—á–µ–Ω–∏—è
                                                let decoded_value = match urlencoding::decode(path_value) {
                                                    Ok(decoded) => decoded.to_string(),
                                                    Err(_) => path_value.to_string(),
                                                };
                                                println!("üìÅ –§–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ ?path=: '{}'", decoded_value);
                                                result = Some(decoded_value);
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                            
                            // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
                            match result {
                                Some(filename) => filename,
                                None => {
                                    println!("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è");
                                    return Err(axum::http::StatusCode::BAD_REQUEST);
                                }
                            }
                        };
                        
                        let file_path = format!("{}/{}", config.folder, actual_filename);
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                        if !std::path::Path::new(&file_path).exists() {
                            return Err(axum::http::StatusCode::NOT_FOUND);
                        }
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                        if let Some(max_size) = config.max_file_size {
                            if let Ok(metadata) = std::fs::metadata(&file_path) {
                                if metadata.len() > max_size {
                                    return Err(axum::http::StatusCode::PAYLOAD_TOO_LARGE);
                                }
                            }
                        }
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
                        if let Some(ref allowed_extensions) = config.allowed_extensions {
                            if let Some(extension) = std::path::Path::new(&actual_filename).extension() {
                                let ext_str = extension.to_string_lossy().to_lowercase();
                                if !allowed_extensions.iter().any(|allowed| {
                                    allowed.trim_start_matches('.').to_lowercase() == ext_str
                                }) {
                                    return Err(axum::http::StatusCode::FORBIDDEN);
                                }
                            }
                        }
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—É—Ç–∏
                        if let Some(ref blocked_paths) = config.blocked_paths {
                            for blocked_path in blocked_paths {
                                if actual_filename.contains(blocked_path) {
                                    return Err(axum::http::StatusCode::FORBIDDEN);
                                }
                            }
                        }
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫—Ä—ã—Ç—ã–µ –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã
                        if !config.allow_hidden_files {
                            if actual_filename.starts_with('.') {
                                return Err(axum::http::StatusCode::FORBIDDEN);
                            }
                        }
                        
                        if !config.allow_system_files {
                            let system_files = ["thumbs.db", ".ds_store", "desktop.ini"];
                            if system_files.iter().any(|&sys_file| {
                                actual_filename.to_lowercase() == sys_file.to_lowercase()
                            }) {
                                return Err(axum::http::StatusCode::FORBIDDEN);
                            }
                        }
                        
                        // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —á—Ç–µ–Ω–∏—è
                        if let Ok(file) = tokio::fs::File::open(&file_path).await {
                            let metadata = file.metadata().await.unwrap_or_else(|_| std::fs::metadata(&file_path).unwrap());
                            
                            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø
                            let mime_type = if let Some(kind) = infer::get(&std::fs::read(&file_path).unwrap_or_default()) {
                                kind.mime_type().to_string()
                            } else {
                                mime_guess::MimeGuess::from_path(&file_path).first_or_octet_stream().to_string()
                            };
                            
                            let stream = tokio_util::io::ReaderStream::new(file);
                            let body = axum::body::Body::from_stream(stream);
                            
                            let mut response = axum::response::Response::new(body);
                            response.headers_mut().insert("content-type", mime_type.parse().unwrap());
                            response.headers_mut().insert("content-disposition", format!("attachment; filename=\"{}\"", actual_filename).parse().unwrap());
                            response.headers_mut().insert("content-length", metadata.len().to_string().parse().unwrap());
                            
                            // –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è
                            
                            Ok(response)
                        } else {
                            Err(axum::http::StatusCode::NOT_FOUND)
                        }
                    }
                };
                
                // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º wildcard –¥–ª—è –ø–æ–¥–ø–∞–ø–æ–∫)
                let actual_route = route_path.clone();
                app = app.route(&actual_route, get(download_handler));
                println!("üì• –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Ä–æ—É—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {} -> {}", route_path, actual_route);
            }
            
            // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            drop(download_routes_map);
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ—É—Ç—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
            let upload_routes = get_upload_routes();
            let upload_routes_map = upload_routes.read().unwrap();
            
            for (route_path, config) in upload_routes_map.iter() {
                let config_clone = config.clone();
                let route_path_clone = route_path.clone();
                
                let upload_handler = move |req: axum::extract::Request| {
                        let config = config_clone.clone();
                        let route_path = route_path_clone.clone();
                        async move {
                            println!("üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ —Ä–æ—É—Ç: {}", route_path);

                            // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ wildcard –ø–∞—Ç—Ç–µ—Ä–Ω–∞
                            fn matches_pattern(pattern: &str, path: &str) -> bool {
                                if pattern == path {
                                    return true; // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                                }

                                if pattern == "*" {
                                    // –ü–∞—Ç—Ç–µ—Ä–Ω "*" —Ä–∞–∑—Ä–µ—à–∞–µ—Ç –ª—é–±—É—é –ø–æ–¥–ø–∞–ø–∫—É
                                    return true;
                                }

                                if pattern.ends_with("/*") {
                                    // –ü–∞—Ç—Ç–µ—Ä–Ω —Ç–∏–ø–∞ "documents/*"
                                    let prefix = &pattern[..pattern.len() - 2];
                                    if path.starts_with(prefix) {
                                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ø–æ–¥–ø–∞–ø–∫–∞, –∞ –Ω–µ —Ñ–∞–π–ª
                                        if path.len() > prefix.len() && path.chars().nth(prefix.len()) == Some('/') {
                                            return true;
                                        }
                                    }
                                }

                                false
                            }

                            // –ò–∑–≤–ª–µ–∫–∞–µ–º subfolder –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ {*subfolder} –∏–ª–∏ –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ ?dir=
                            let subfolder_from_url = {
                                let mut result = None;

                                // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä {*subfolder} –∏–∑ –ø—É—Ç–∏
                                if route_path.contains("{*subfolder}") {
                                    // –ò–∑–≤–ª–µ–∫–∞–µ–º subfolder –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ URL –∑–∞–ø—Ä–æ—Å–∞
                                    let request_path = req.uri().path();
                                    let path_parts: Vec<&str> = request_path.split('/').collect();

                                    // –ï—Å–ª–∏ –ø—É—Ç—å —Å–æ–¥–µ—Ä–∂–∏—Ç /upload/ –∏–ª–∏ /upload-multiple/, –∏–∑–≤–ª–µ–∫–∞–µ–º subfolder
                                    if (request_path.starts_with("/upload/") || request_path.starts_with("/upload-multiple/")) && path_parts.len() >= 3 {
                                        let subfolder = path_parts[2..].join("/");
                                        if !subfolder.is_empty() {
                                            println!("üìÅ –ü–æ–¥–ø–∞–ø–∫–∞ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ {{*subfolder}}: '{}'", subfolder);
                                            result = Some(subfolder);
                                        }
                                    }
                                }

                                // –ï—Å–ª–∏ subfolder –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø—É—Ç–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º query –ø–∞—Ä–∞–º–µ—Ç—Ä ?dir=
                                if result.is_none() {
                                    if let Some(query) = req.uri().query() {
                                        // –ü–∞—Ä—Å–∏–º query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                                        let query_parts: Vec<&str> = query.split('&').collect();
                                        for part in query_parts {
                                            if part.starts_with("dir=") {
                                                let dir_value = &part[4..]; // –£–±–∏—Ä–∞–µ–º "dir="
                                                if !dir_value.is_empty() {
                                                    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL-encoded –∑–Ω–∞—á–µ–Ω–∏—è
                                                    let decoded_value = match urlencoding::decode(dir_value) {
                                                        Ok(decoded) => decoded.to_string(),
                                                        Err(_) => dir_value.to_string(),
                                                    };
                                                    println!("üìÅ –ü–æ–¥–ø–∞–ø–∫–∞ –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: '{}' (–¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è: '{}')", dir_value, decoded_value);
                                                    result = Some(decoded_value);
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }

                                result
                            };

                            // –ü–æ–ª—É—á–∞–µ–º Content-Type –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è boundary
                            let content_type = req.headers()
                                .get("content-type")
                                .and_then(|h| h.to_str().ok())
                                .unwrap_or("")
                                .to_string();

                            if !content_type.contains("multipart/form-data") {
                                return axum::response::Response::builder()
                                    .status(axum::http::StatusCode::BAD_REQUEST)
                                    .body(axum::body::Body::from("Content-Type must be multipart/form-data"))
                                    .unwrap();
                            }

                            // –ò–∑–≤–ª–µ–∫–∞–µ–º boundary
                            let boundary = content_type
                                .split("boundary=")
                                .nth(1)
                                .unwrap_or("boundary");

                            // –ü–æ–ª—É—á–∞–µ–º body
                            let body_bytes = match axum::body::to_bytes(req.into_body(), usize::MAX).await {
                                Ok(bytes) => bytes,
                                Err(_) => {
                                    return axum::response::Response::builder()
                                        .status(axum::http::StatusCode::BAD_REQUEST)
                                        .body(axum::body::Body::from("Failed to read request body"))
                                        .unwrap();
                                }
                            };

                            // –°–æ–∑–¥–∞–µ–º stream –¥–ª—è multer
                            let stream = stream::once(async move {
                                Result::<axum::body::Bytes, std::io::Error>::Ok(body_bytes)
                            });

                            // –°–æ–∑–¥–∞–µ–º Multipart
                            let mut multipart = Multipart::new(stream, boundary);

                            let mut uploaded_files = Vec::new();
                            let mut form_fields = std::collections::HashMap::new();
                            // –ò—Å–ø–æ–ª—å–∑—É–µ–º subfolder –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                            let subfolder_from_form = subfolder_from_url;

                            // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–∞—Ö
                            #[derive(serde::Serialize)]
                            struct FileInfo {
                                name: String,
                                size: u64,
                                mime_type: String,
                                relative_path: String,
                            }

                            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–ª—è –∏ —Ñ–∞–π–ª—ã –≤ –æ–¥–Ω–æ–º —Ü–∏–∫–ª–µ
                            loop {
                                match multipart.next_field().await {
                                    Ok(Some(field)) => {
                                        let field_name = field.name().unwrap_or("unknown").to_string();

                                        if let Some(filename) = field.file_name() {
                                        // –≠—Ç–æ —Ñ–∞–π–ª - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ä–∞–∑—É
                                        let filename = filename.to_string();
                                        println!("üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª: '{}'", filename);

                                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–¥–ø–∞–ø–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞
                                        let upload_folder = if let Some(ref subfolder) = subfolder_from_form {
                                            println!("üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–¥–ø–∞–ø–∫—É –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: '{}'", subfolder);
                                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–¥–ø–∞–ø–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π wildcard
                                            if let Some(ref allowed_subfolders) = config.allowed_subfolders {
                                                println!("üìÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–¥–ø–∞–ø–∫–∏: {:?}", allowed_subfolders);

                                                let is_allowed = allowed_subfolders.iter().any(|allowed| {
                                                    matches_pattern(allowed, subfolder)
                                                });

                                                if !is_allowed {
                                                    println!("‚ùå –ü–æ–¥–ø–∞–ø–∫–∞ '{}' –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞", subfolder);
                                                    return axum::response::Response::builder()
                                                        .status(axum::http::StatusCode::FORBIDDEN)
                                                        .body(axum::body::Body::from(format!("Subfolder '{}' not allowed", subfolder)))
                                                        .unwrap();
                                                }
                                                println!("‚úÖ –ü–æ–¥–ø–∞–ø–∫–∞ '{}' —Ä–∞–∑—Ä–µ—à–µ–Ω–∞", subfolder);
                                            }
                                            let folder = format!("{}/{}", config.folder, subfolder);
                                            println!("üìÅ –ü–æ–ª–Ω–∞—è –ø–∞–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: '{}'", folder);
                                            folder
                                        } else {
                                            println!("üìÅ –ü–æ–¥–ø–∞–ø–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–Ω–µ–≤—É—é: '{}'", config.folder);
                                            config.folder.clone()
                                        };

                                        // –°–æ–∑–¥–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                                        let relative_path = if let Some(ref subfolder) = subfolder_from_form {
                                            let path = format!("{}/{}", subfolder, filename);
                                            println!("üìÅ –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É: '{}'", path);
                                            path
                                        } else {
                                            println!("üìÅ –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å (–±–µ–∑ –ø–æ–¥–ø–∞–ø–∫–∏): '{}'", filename);
                                            filename.clone()
                                        };

                                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
                                        if let Some(ref allowed_extensions) = config.allowed_extensions {
                                            if let Some(extension) = std::path::Path::new(&filename).extension() {
                                                let ext_str = extension.to_string_lossy().to_lowercase();
                                                if !allowed_extensions.iter().any(|allowed| {
                                                    allowed.trim_start_matches('.').to_lowercase() == ext_str
                                                }) {
                                                    return axum::response::Response::builder()
                                                        .status(axum::http::StatusCode::FORBIDDEN)
                                                        .body(axum::body::Body::from(format!("File extension .{} not allowed", ext_str)))
                                                        .unwrap();
                                                }
                                            }
                                        }

                                        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø —á–µ—Ä–µ–∑ mime_guess
                                        let mime_type = MimeGuess::from_path(&filename)
                                            .first_or_octet_stream()
                                            .to_string();

                                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º MIME —Ç–∏–ø –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                                        if let Some(ref allowed_mime_types) = config.allowed_mime_types {
                                            if !allowed_mime_types.contains(&mime_type) {
                                                return axum::response::Response::builder()
                                                    .status(axum::http::StatusCode::FORBIDDEN)
                                                    .body(axum::body::Body::from(format!("MIME type {} not allowed", mime_type)))
                                                    .unwrap();
                                            }
                                        }

                                        // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
                                        let data = match field.bytes().await {
                                            Ok(data) => data,
                                            Err(_) => {
                                                return axum::response::Response::builder()
                                                    .status(axum::http::StatusCode::BAD_REQUEST)
                                                    .body(axum::body::Body::from("Failed to read file data"))
                                                    .unwrap();
                                            }
                                        };

                                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                                        if let Some(max_size) = config.max_file_size {
                                            if data.len() as u64 > max_size {
                                                return axum::response::Response::builder()
                                                    .status(axum::http::StatusCode::PAYLOAD_TOO_LARGE)
                                                    .body(axum::body::Body::from(format!("File size {} exceeds limit {}", data.len(), max_size)))
                                                    .unwrap();
                                            }
                                        }

                                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å
                                        let file_path = format!("{}/{}", upload_folder, filename);
                                        if !config.overwrite && std::path::Path::new(&file_path).exists() {
                                            return axum::response::Response::builder()
                                                .status(axum::http::StatusCode::CONFLICT)
                                                .body(axum::body::Body::from(format!("File {} already exists", relative_path)))
                                                .unwrap();
                                        }

                                        // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                                        println!("üìÅ –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É: '{}'", upload_folder);
                                        if let Err(e) = std::fs::create_dir_all(&upload_folder) {
                                            println!("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ '{}': {}", upload_folder, e);
                                            return axum::response::Response::builder()
                                                .status(axum::http::StatusCode::INTERNAL_SERVER_ERROR)
                                                .body(axum::body::Body::from(format!("Failed to create upload directory: {}", e)))
                                            .unwrap();
                                        }
                                        println!("‚úÖ –ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ: '{}'", upload_folder);

                                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                                        println!("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤: '{}'", file_path);
                                        if let Err(e) = std::fs::write(&file_path, &data) {
                                            println!("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ '{}': {}", file_path, e);
                                            return axum::response::Response::builder()
                                                .status(axum::http::StatusCode::INTERNAL_SERVER_ERROR)
                                                .body(axum::body::Body::from(format!("Failed to save file: {}", e)))
                                                .unwrap();
                                        }
                                        println!("‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ: '{}'", file_path);

                                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–≥—Ä—É–∑–∫–∏
                                        if config.multiple {
                                            // –î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º maxFiles
                                            if let Some(max_files) = config.max_files {
                                                if uploaded_files.len() >= max_files as usize {
                                                    return axum::response::Response::builder()
                                                        .status(axum::http::StatusCode::PAYLOAD_TOO_LARGE)
                                                        .body(axum::body::Body::from(format!("Maximum number of files ({}) exceeded", max_files)))
                                                        .unwrap();
                                                }
                                            }
                                        } else {
                                            // –î–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ 1 —Ñ–∞–π–ª
                                            if uploaded_files.len() >= 1 {
                                                return axum::response::Response::builder()
                                                    .status(axum::http::StatusCode::BAD_REQUEST)
                                                    .body(axum::body::Body::from("Single file upload route received multiple files"))
                                                    .unwrap();
                                            }
                                        }

                                        // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
                                        let file_info = FileInfo {
                                            name: filename.clone(),
                                            size: data.len() as u64,
                                            mime_type: mime_type.clone(),
                                            relative_path,
                                        };

                                        uploaded_files.push(file_info);
                                        println!("üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {} ({} –±–∞–π—Ç, {})", file_path, data.len(), mime_type);
                                    } else {
                                        // –≠—Ç–æ –æ–±—ã—á–Ω–æ–µ –ø–æ–ª–µ —Ñ–æ—Ä–º—ã
                                        let value = field.text().await.unwrap_or_else(|_| String::new());
                                        println!("üìù –ü–æ–ª–µ —Ñ–æ—Ä–º—ã: '{}' = '{}'", field_name, value);
                                        form_fields.insert(field_name, value);
                                    }
                                }
                                Ok(None) => break, // –ö–æ–Ω–µ—Ü multipart –¥–∞–Ω–Ω—ã—Ö
                                Err(_) => break, // –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
                            }
                        }

                        // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                        let response = serde_json::json!({
                            "success": true,
                            "message": "File uploaded successfully",
                            "uploadedFiles": uploaded_files,
                            "formFields": form_fields,
                            "totalFiles": uploaded_files.len()
                        });

                        axum::response::Response::builder()
                            .status(axum::http::StatusCode::OK)
                            .header("content-type", "application/json")
                            .body(axum::body::Body::from(response.to_string()))
                            .unwrap()
                    }
                };
                    
                // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç
                app = app.route(route_path, post(upload_handler));
                println!("üì§ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Ä–æ—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏: {}", route_path);
            }
            
            // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            drop(upload_routes_map);
            
            // –î–æ–±–∞–≤–ª—è–µ–º fallback –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
            let app = app.fallback(|req: axum::http::Request<axum::body::Body>| async move {
                let path = req.uri().path().to_string();
                
                // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª
                let accept_encoding = req.headers().get("accept-encoding").and_then(|h| h.to_str().ok());
                if let Some(static_response) = handle_static_file(path, accept_encoding).await {
                    return static_response;
                }
                
                // –ï—Å–ª–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 404
                axum::response::Response::builder()
                    .status(axum::http::StatusCode::NOT_FOUND)
                    .body(axum::body::Body::from("Not Found"))
                    .unwrap()
            });
            
            let listener = tokio::net::TcpListener::bind(addr).await.unwrap();
            axum::serve(listener, app).await.unwrap();
        });
    });

    // –î–∞–µ–º —Å–µ—Ä–≤–µ—Ä—É –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
    std::thread::sleep(std::time::Duration::from_millis(100));

    Ok(cx.undefined())
}
