import { logger } from './logger';
import { websocketCallbacks } from './global-utils';

export interface WebSocketEventResult {
  shouldContinue: boolean;
  shouldCancel?: boolean;
  modifiedEvent?: any;
  error?: string;
  status?: number;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–æ–ª–±–µ–∫–∞
function processCallbackResult(callbackResult: any, result: WebSocketEventResult): void {
  if (callbackResult && typeof callbackResult === 'object') {
    if (callbackResult.shouldCancel) {
      result.shouldCancel = true;
      result.shouldContinue = false;
    }
    if (callbackResult.modifiedEvent) {
      result.modifiedEvent = callbackResult.modifiedEvent;
      result.shouldContinue = true; // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    }
    if (callbackResult.error) {
      result.error = callbackResult.error;
    }
  }
  // –ï—Å–ª–∏ –∫–æ–ª–±–µ–∫ –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–ª–∏ –≤–µ—Ä–Ω—É–ª undefined - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
  // –ï—Å–ª–∏ –∫–æ–ª–±–µ–∫ –≤–µ—Ä–Ω—É–ª –æ–±—ä–µ–∫—Ç —Å shouldCancel: false - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
}

export async function executeWebSocketEvent(eventJson: string, timeout: number): Promise<string> {
  logger.debug('üîå executeWebSocketEvent function called with eventJson length:' + eventJson.length);
  
  // –û–±—ä—è–≤–ª—è–µ–º timeoutId –≤ –Ω–∞—á–∞–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏
  let timeoutId: NodeJS.Timeout | null = null;
  
  try {
    const eventData = JSON.parse(eventJson);
    const eventType = eventData.type;
    const path = eventData.path;
    
    logger.debug(`üîå executeWebSocketEvent called with type: ${eventType}, path: ${path}`, 'rnode_server::websocket');

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–±–µ–∫–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—É—Ç–∏
    const callbacks = websocketCallbacks.get(path);
    if (!callbacks) {
      logger.warn(`‚ö†Ô∏è No WebSocket callbacks found for path: ${path}`, 'rnode_server::websocket');
      return JSON.stringify({
        shouldContinue: true,
        shouldCancel: false,
        modifiedEvent: eventData
      });
    }

    // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    let result: WebSocketEventResult = {
      shouldContinue: true,
      shouldCancel: false,
      modifiedEvent: eventData
    };

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
    timeoutId = setTimeout(() => {
      logger.warn(`‚ö†Ô∏è WebSocket event timeout after ${timeout}ms`, 'rnode_server::websocket');
    }, timeout);

    try {
      // –í—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–ª–±–µ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
      switch (eventType) {
        case 'connect':
          if (callbacks.onConnect) {
            try {
              const callbackResult = callbacks.onConnect(eventData);
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–º–∏—Å–æ–º
              if (callbackResult && typeof callbackResult === 'object' && typeof (callbackResult as any).then === 'function') {
                // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–ª–±–µ–∫ - –∂–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                try {
                  const resolvedResult = await callbackResult;
                  processCallbackResult(resolvedResult, result);
                } catch (error) {
                  logger.error(`‚ùå Error in async onConnect callback: ${error}`, 'rnode_server::websocket');
                  result.error = error instanceof Error ? error.message : String(error);
                  result.status = 500;
                  result.shouldCancel = true;
                  result.shouldContinue = false;
                }
              } else {
                // –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–ª–±–µ–∫
                processCallbackResult(callbackResult, result);
              }
            } catch (error) {
              logger.error(`‚ùå Error in onConnect callback: ${error}`, 'rnode_server::websocket');
              result.error = error instanceof Error ? error.message : String(error);
              result.status = 500;
              result.shouldCancel = true;
              result.shouldContinue = false;
            }
          }
          break;
        case 'message':
          if (callbacks.onMessage) {
            try {
              const callbackResult = callbacks.onMessage(eventData);
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–º–∏—Å–æ–º
              if (callbackResult && typeof callbackResult === 'object' && typeof (callbackResult as any).then === 'function') {
                // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–ª–±–µ–∫ - –∂–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                try {
                  const resolvedResult = await callbackResult;
                  processCallbackResult(resolvedResult, result);
                } catch (error) {
                  logger.error(`‚ùå Error in async onMessage callback: ${error}`, 'rnode_server::websocket');
                  result.error = error instanceof Error ? error.message : String(error);
                  result.status = 500;
                  result.shouldCancel = true;
                  result.shouldContinue = false;
                }
              } else {
                // –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–ª–±–µ–∫
                processCallbackResult(callbackResult, result);
              }
            } catch (error) {
              logger.error(`‚ùå Error in onMessage callback: ${error}`, 'rnode_server::websocket');
              result.error = error instanceof Error ? error.message : String(error);
              result.status = 500;
              result.shouldCancel = true;
              result.shouldContinue = false;
            }
          }
          break;
        case 'close':
          if (callbacks.onClose) {
            try {
              const callbackResult = callbacks.onClose(eventData);
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–º–∏—Å–æ–º
              if (callbackResult && typeof callbackResult === 'object' && typeof (callbackResult as any).then === 'function') {
                // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–ª–±–µ–∫ - –∂–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                try {
                  const resolvedResult = await callbackResult;
                  processCallbackResult(resolvedResult, result);
                } catch (error) {
                  logger.error(`‚ùå Error in async onClose callback: ${error}`, 'rnode_server::websocket');
                  result.error = error instanceof Error ? error.message : String(error);
                  result.status = 500;
                  result.shouldCancel = true;
                  result.shouldContinue = false;
                }
              } else {
                // –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–ª–±–µ–∫
                processCallbackResult(callbackResult, result);
              }
            } catch (error) {
              logger.error(`‚ùå Error in onClose callback: ${error}`, 'rnode_server::websocket');
              result.error = error instanceof Error ? error.message : String(error);
              result.status = 500;
              result.shouldCancel = true;
              result.shouldContinue = false;
            }
          }
          break;
        case 'error':
          if (callbacks.onError) {
            try {
              const callbackResult = callbacks.onError(eventData);
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–º–∏—Å–æ–º
              if (callbackResult && typeof callbackResult === 'object' && typeof (callbackResult as any).then === 'function') {
                // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–ª–±–µ–∫ - –∂–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                try {
                  const resolvedResult = await callbackResult;
                  processCallbackResult(resolvedResult, result);
                } catch (error) {
                  logger.error(`‚ùå Error in async onError callback: ${error}`, 'rnode_server::websocket');
                  result.error = error instanceof Error ? error.message : String(error);
                  result.status = 500;
                  result.shouldCancel = true;
                  result.shouldContinue = false;
                }
              } else {
                // –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–ª–±–µ–∫
                processCallbackResult(callbackResult, result);
              }
            } catch (error) {
              logger.error(`‚ùå Error in onError callback: ${error}`, 'rnode_server::websocket');
              result.error = error instanceof Error ? error.message : String(error);
              result.status = 500;
              result.shouldCancel = true;
              result.shouldContinue = false;
            }
          }
          break;
        case 'join_room':
          if (callbacks.onJoinRoom) {
            try {
              const callbackResult = callbacks.onJoinRoom(eventData);
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–º–∏—Å–æ–º
              if (callbackResult && typeof callbackResult === 'object' && typeof (callbackResult as any).then === 'function') {
                // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–ª–±–µ–∫ - –∂–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                try {
                  const resolvedResult = await callbackResult;
                  processCallbackResult(resolvedResult, result);
                } catch (error) {
                  logger.error(`‚ùå Error in async onJoinRoom callback: ${error}`, 'rnode_server::websocket');
                  result.error = error instanceof Error ? error.message : String(error);
                  result.status = 500;
                  result.shouldCancel = true;
                  result.shouldContinue = false;
                }
              } else {
                // –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–ª–±–µ–∫
                processCallbackResult(callbackResult, result);
              }
            } catch (error) {
              logger.error(`‚ùå Error in onJoinRoom callback: ${error}`, 'rnode_server::websocket');
              result.error = error instanceof Error ? error.message : String(error);
              result.status = 500;
              result.shouldCancel = true;
              result.shouldContinue = false;
            }
          }
          break;
        case 'leave_room':
          if (callbacks.onLeaveRoom) {
            try {
              const callbackResult = callbacks.onLeaveRoom(eventData);
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–º–∏—Å–æ–º
              if (callbackResult && typeof callbackResult === 'object' && typeof (callbackResult as any).then === 'function') {
                // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–ª–±–µ–∫ - –∂–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                try {
                  const resolvedResult = await callbackResult;
                  processCallbackResult(resolvedResult, result);
                } catch (error) {
                  logger.error(`‚ùå Error in async onLeaveRoom callback: ${error}`, 'rnode_server::websocket');
                  result.error = error instanceof Error ? error.message : String(error);
                  result.status = 500;
                  result.shouldCancel = true;
                  result.shouldContinue = false;
                }
              } else {
                // –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–ª–±–µ–∫
                processCallbackResult(callbackResult, result);
              }
            } catch (error) {
              logger.error(`‚ùå Error in onLeaveRoom callback: ${error}`, 'rnode_server::websocket');
              result.error = error instanceof Error ? error.message : String(error);
              result.status = 500;
              result.shouldCancel = true;
              result.shouldContinue = false;
            }
          }
          break;
        case 'ping':
          if (callbacks.onPing) {
            try {
              const callbackResult = callbacks.onPing(eventData);
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–º–∏—Å–æ–º
              if (callbackResult && typeof callbackResult === 'object' && typeof (callbackResult as any).then === 'function') {
                // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–ª–±–µ–∫ - –∂–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                try {
                  const resolvedResult = await callbackResult;
                  processCallbackResult(resolvedResult, result);
                } catch (error) {
                  logger.error(`‚ùå Error in async onPing callback: ${error}`, 'rnode_server::websocket');
                  result.error = error instanceof Error ? error.message : String(error);
                  result.status = 500;
                  result.shouldCancel = true;
                  result.shouldContinue = false;
                }
              } else {
                // –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–ª–±–µ–∫
                processCallbackResult(callbackResult, result);
              }
            } catch (error) {
              logger.error(`‚ùå Error in onPing callback: ${error}`, 'rnode_server::websocket');
              result.error = error instanceof Error ? error.message : String(error);
              result.status = 500;
              result.shouldCancel = true;
              result.shouldContinue = false;
            }
          }
          break;
        case 'pong':
          if (callbacks.onPong) {
            try {
              const callbackResult = callbacks.onPong(eventData);
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–º–∏—Å–æ–º
              if (callbackResult && typeof callbackResult === 'object' && typeof (callbackResult as any).then === 'function') {
                // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–ª–±–µ–∫ - –∂–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                try {
                  const resolvedResult = await callbackResult;
                  processCallbackResult(resolvedResult, result);
                } catch (error) {
                  logger.error(`‚ùå Error in async onPong callback: ${error}`, 'rnode_server::websocket');
                  result.error = error instanceof Error ? error.message : String(error);
                  result.status = 500;
                  result.shouldCancel = true;
                  result.shouldContinue = false;
                }
              } else {
                // –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–ª–±–µ–∫
                processCallbackResult(callbackResult, result);
              }
            } catch (error) {
              logger.error(`‚ùå Error in onPong callback: ${error}`, 'rnode_server::websocket');
              result.error = error instanceof Error ? error.message : String(error);
              result.status = 500;
              result.shouldCancel = true;
              result.shouldContinue = false;
            }
          }
          break;
        case 'binary_message':
          if (callbacks.onBinaryMessage) {
            try {
              const callbackResult = callbacks.onBinaryMessage(eventData);

              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–º–∏—Å–æ–º
              if (callbackResult && typeof callbackResult === 'object' && typeof (callbackResult as any).then === 'function') {
                // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–ª–±–µ–∫ - –∂–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                try {
                  const resolvedResult = await callbackResult;
                  processCallbackResult(resolvedResult, result);
                } catch (error) {
                  logger.error(`‚ùå Error in async onBinaryMessage callback: ${error}`, 'rnode_server::websocket');
                  result.error = error instanceof Error ? error.message : String(error);
                  result.status = 500;
                  result.shouldCancel = true;
                  result.shouldContinue = false;
                }
              } else {
                // –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–ª–±–µ–∫
                processCallbackResult(callbackResult, result);
              }
            } catch (error) {
              logger.error(`‚ùå Error in onBinaryMessage callback: ${error}`, 'rnode_server::websocket');
              result.error = error instanceof Error ? error.message : String(error);
              result.status = 500;
              result.shouldCancel = true;
              result.shouldContinue = false;
            }
          }
          break;
        default:
          logger.debug(`üîç WebSocket event (not handled by callbacks): ${eventType}`, 'rnode_server::websocket');
      }
    } finally {
      if (timeoutId) {
        clearTimeout(timeoutId);
      }
    }

    logger.debug(`üîå WebSocket event result: ${JSON.stringify(result)}`, 'rnode_server::websocket');
    return JSON.stringify(result);

  } catch (error) {
    // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    if (timeoutId) {
      clearTimeout(timeoutId);
    }
    
    logger.error(`‚ùå Error in executeWebSocketEvent: ${error instanceof Error ? error.message : String(error)}`, 'rnode_server::websocket');
    return JSON.stringify({
      shouldContinue: false,
      shouldCancel: true,
      error: error instanceof Error ? error.message : String(error),
      status: 500
    });
  }
}
