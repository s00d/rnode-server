import * as addon from '../load.cjs';
import { CacheManager, CacheInitConfig, CacheOptions } from '../types/cache';
import { logger } from './logger';

/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è RNode Server
 */

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫—ç—à –º–µ–Ω–µ–¥–∂–µ—Ä–∞
let globalCacheManager: CacheManager | null = null;

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export function initCacheSystem(config: CacheInitConfig = {}): boolean {
  try {
    const defaultConfig = {
      defaultTtl: 3600, // 1 —á–∞—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      maxMemory: 100 * 1024 * 1024, // 100MB –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      redisUrl: '',
      fileCachePath: './cache',
      ...config
    };

    logger.info('üöÄ Initializing cache system...', 'rnode_server::cache');
    
    addon.initCacheSystem(defaultConfig);
    
    logger.info('‚úÖ Cache system initialized successfully', 'rnode_server::cache');
    return true;
  } catch (error) {
    logger.error(`‚ùå Cache initialization error: ${error}`, 'rnode_server::cache');
    return false;
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫—ç—à –º–µ–Ω–µ–¥–∂–µ—Ä–∞
 */
export function getCacheManager(): CacheManager | null {
  if (!globalCacheManager) {
    logger.warn('‚ö†Ô∏è Cache system not initialized. Call initCacheSystem() first.', 'rnode_server::cache');
    return null;
  }
  return globalCacheManager;
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫—ç—à –º–µ–Ω–µ–¥–∂–µ—Ä–∞
 */
export function createCacheManager(): CacheManager {
  return new RNodeCacheManager();
}

/**
 * –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –∫—ç—à –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è RNode Server
 */
class RNodeCacheManager implements CacheManager {
  
  get<T = string>(key: string, tags?: string[]): T | null {
    try {
      const value = addon.cacheGet(key, tags || []);
      if (value === null) {
        logger.debug(`‚ùå Cache miss: ${key}`, 'rnode_server::cache');
        return null;
      }
      
      logger.debug(`‚úÖ Cache hit: ${key}`, 'rnode_server::cache');
      
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å JSON –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å—Ç—Ä–æ–∫–∞
      if (typeof value === 'string') {
        try {
          return JSON.parse(value) as T;
        } catch {
          return value as T;
        }
      }
      
      return value as T;
    } catch (error) {
      logger.error(`‚ùå Cache get error for key ${key}: ${error}`, 'rnode_server::cache');
      return null;
    }
  }

  set<T = string>(key: string, value: T, options?: CacheOptions): boolean {
    try {
      const stringValue = typeof value === 'string' ? value : JSON.stringify(value);
      
      const success = addon.cacheSet(key, stringValue, options?.tags || [], options?.ttl || 0);
      
      if (success) {
        logger.debug(`‚úÖ Cache set: ${key}`, 'rnode_server::cache');
      } else {
        logger.error(`‚ùå Cache set failed: ${key}`, 'rnode_server::cache');
      }
      
      return success;
    } catch (error) {
      logger.error(`‚ùå Cache set error for key ${key}: ${error}`, 'rnode_server::cache');
      return false;
    }
  }

  delete(key: string, tags?: string[]): boolean {
    try {
      const deleted = addon.cacheDelete(key, tags || []);
      
      if (deleted) {
        logger.debug(`‚úÖ Cache delete: ${key}`, 'rnode_server::cache');
      } else {
        logger.debug(`‚ö†Ô∏è Cache delete - key not found: ${key}`, 'rnode_server::cache');
      }
      
      return deleted;
    } catch (error) {
      logger.error(`‚ùå Cache delete error for key ${key}: ${error}`, 'rnode_server::cache');
      return false;
    }
  }

  exists(key: string, tags?: string[]): boolean {
    try {
      const exists = addon.cacheExists(key, tags || []);
      logger.debug(`üîç Cache exists check for key ${key}: ${exists}`, 'rnode_server::cache');
      return exists;
    } catch (error) {
      logger.error(`‚ùå Cache exists error for key ${key}: ${error}`, 'rnode_server::cache');
      return false;
    }
  }

  clear(): boolean {
    try {
      const success = addon.cacheClear();
      
      if (success) {
        logger.info('‚úÖ Cache cleared successfully', 'rnode_server::cache');
      } else {
        logger.error('‚ùå Cache clear failed', 'rnode_server::cache');
      }
      
      return success;
    } catch (error) {
      logger.error(`‚ùå Cache clear error: ${error}`, 'rnode_server::cache');
      return false;
    }
  }

  flushByTags(tags: string[]): number {
    try {
      const count = addon.cacheFlushByTags(tags);
      logger.info(`üè∑Ô∏è Flushed ${count} items by tags: ${tags.join(', ')}`, 'rnode_server::cache');
      return count;
    } catch (error) {
      logger.error(`‚ùå Cache flush by tags error: ${error}`, 'rnode_server::cache');
      return 0;
    }
  }
}
