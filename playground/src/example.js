import { createApp, Router } from 'rnode-server';
import UserDatabase from './database.js';
import AuthDatabase from './auth-database.js';

const app = createApp();
const port = 4546;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const db = new UserDatabase();
const authDb = new AuthDatabase();

// –û—á–∏—â–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
authDb.cleanupExpiredSessions();

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–º—è—Ç—å
app.static('./public');

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
app.use((req, res, next) => {
  const timestamp = new Date().toISOString();
  console.log(`üìã [${timestamp}] ${req.method} ${req.url} - Global middleware`);

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  req.setParam('requestId', Math.random().toString(36).substr(2, 9));
  req.setParam('timestamp', Date.now());
  req.setParam('globalMiddleware', true);

  // –ü–æ–ª—É—á–∞–µ–º sessionId –∏–∑ –∫—É–∫–∏
  const sessionId = req.getCookie('sessionId');
  if (sessionId) {
    console.log('üç™ –ù–∞–π–¥–µ–Ω–∞ —Å–µ—Å—Å–∏—è –≤ –∫—É–∫–∏:', sessionId);

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const sessionResult = authDb.validateSession(sessionId);
    if (sessionResult.success) {
      req.setParam('userId', sessionResult.userId);
      req.setParam('user', sessionResult.user);
      req.setParam('isAuthenticated', true);
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', sessionResult.user.username);
    } else {
      console.log('‚ùå –°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞:', sessionResult.message);
      // –û—á–∏—â–∞–µ–º –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é –∫—É–∫—É
      res.setCookie('sessionId', '', { maxAge: 0 });
      req.setParam('isAuthenticated', false);
    }
  } else {
    req.setParam('isAuthenticated', false);
    console.log('üîí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
  }

  console.log('üåê –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:', req.getParams());

  next();
});

// GET –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ middleware
app.get('/hello', (req, res) => {
  console.log('üëã Hello –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ middleware:', req.getParams());

  // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  req.setParam('handlerName', 'hello');
  req.setParam('message', 'Hello World!');

  res.json({
    message: 'Hello World!',
    globalParams: req.getParams(),
    info: '–≠—Ç–æ—Ç –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ middleware',
    auth: {
      isAuthenticated: req.getParam('isAuthenticated'),
      user: req.getParam('user'),
      userId: req.getParam('userId')
    }
  });
});

// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç
app.get('/api/test', (req, res) => {
  res.json({
    success: true,
    message: 'API —Ä–∞–±–æ—Ç–∞–µ—Ç!',
    timestamp: new Date().toISOString()
  });
});

// –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ CORS
app.get('/api/cors-test', (req, res) => {
  try {
    console.log('=== GET /api/cors-test ===');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–µ—Ç–æ–¥—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if (typeof req.getHeader !== 'function') {
      throw new Error('req.getHeader –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π');
    }

    console.log('Origin header:', req.getHeader('origin'));
    console.log('User-Agent header:', req.getHeader('user-agent'));

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ cookies –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    res.setCookie('testCookie', 'testValue', { maxAge: 3600000 });
    res.setCookie('sessionId', 'abc123', { httpOnly: true });
    res.setHeader('X-Custom-Header', 'test-value');
    res.setHeader('X-Response-Time', Date.now().toString());

    // –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Content-Type
    res.setHeader('Content-Type', 'application/json; charset=utf-8');

    // –ü–æ–ª—É—á–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ cookies –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const setCookies = res.getCookies();
    const setHeaders = res.getHeaders();

    res.json({
      success: true,
      message: 'CORS —Ä–∞–±–æ—Ç–∞–µ—Ç!',
      origin: req.getHeader('origin'),
      userAgent: req.getHeader('user-agent'),
      timestamp: new Date().toISOString(),
      corsInfo: {
        message: 'CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã middleware',
        allowOrigin: '*',
        allowMethods: 'GET, POST, PUT, DELETE, PATCH, OPTIONS',
        allowHeaders: 'Content-Type, Authorization, X-Requested-With, X-Custom-Header'
      },
      // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã
      setCookies: setCookies,
      setHeaders: setHeaders
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ /api/cors-test:', error);
    res.setHeader('Content-Type', 'application/json; charset=utf-8');
    res.json({
      success: false,
      message: '–û—à–∏–±–∫–∞: ' + error.message,
      error: error.stack
    });
  }
});

// ===== –°–û–ó–î–ê–ù–ò–ï –†–û–£–¢–ï–†–ê –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô =====

// –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const usersRouter = Router();

// Middleware –¥–ª—è —Ä–æ—É—Ç–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
usersRouter.use((req, res, next) => {
  console.log('üë• Users Router Middleware:', req.method, req.url);
  req.setParam('routerName', 'users');
  next();
});

// POST –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
usersRouter.post('', (req, res) => {
  console.log('=== POST /api/users ===');
  console.log('Body:', req.body);

  try {
    // –ü–∞—Ä—Å–∏–º body –µ—Å–ª–∏ —ç—Ç–æ JSON
    let userData = req.body;
    if (typeof req.body === 'string') {
      try {
        userData = JSON.parse(req.body);
      } catch (e) {
        userData = { name: req.body, email: '', age: null };
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (!userData.name || !userData.email) {
      return res.json({
        success: false,
        message: '–ò–º—è –∏ email –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
      });
    }

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
    const result = db.createUser(userData);

    if (result.success) {
      res.json({
        success: true,
        message: result.message,
        userId: result.id,
        user: userData
      });
    } else {
      res.json({
        success: false,
        message: result.message
      });
    }
  } catch (error) {
    res.json({
      success: false,
      message: `–û—à–∏–±–∫–∞: ${error.message}`
    });
  }
});

// GET –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
usersRouter.get('', (req, res) => {
  console.log('=== GET /api/users ===');

  const result = db.getAllUsers();
  res.json(result);
});

// GET –º–∞—Ä—à—Ä—É—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
usersRouter.get('/{id}', (req, res) => {
  console.log('=== GET /api/users/:id ===');
  console.log('ID:', req.params.id);

  const userId = parseInt(req.params.id);
  if (isNaN(userId)) {
    return res.json({
      success: false,
      message: '–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
    });
  }

  const result = db.getUserById(userId);
  res.json(result);
});

// PUT –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
usersRouter.put('/{id}', (req, res) => {
  console.log('=== PUT /api/users/:id ===');
  console.log('ID:', req.params.id);
  console.log('Body:', req.body);

  const userId = parseInt(req.params.id);
  if (isNaN(userId)) {
    return res.json({
      success: false,
      message: '–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
    });
  }

  try {
    let userData = req.body;
    if (typeof req.body === 'string') {
      try {
        userData = JSON.parse(req.body);
      } catch (e) {
        userData = { name: req.body, email: '', age: null };
      }
    }

    if (!userData.name || !userData.email) {
      return res.json({
        success: false,
        message: '–ò–º—è –∏ email –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
      });
    }

    const result = db.updateUser(userId, userData);
    res.json(result);
  } catch (error) {
    res.json({
      success: false,
      message: `–û—à–∏–±–∫–∞: ${error.message}`
    });
  }
});

// DELETE –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
usersRouter.delete('/{id}', (req, res) => {
  console.log('=== DELETE /api/users/:id ===');
  console.log('ID:', req.params.id);

  const userId = parseInt(req.params.id);
  if (isNaN(userId)) {
    return res.json({
      success: false,
      message: '–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
    });
  }

  const result = db.deleteUser(userId);
  res.json(result);
});

// GET –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
usersRouter.get('/search/{query}', (req, res) => {
  console.log('=== GET /api/users/search/:query ===');
  console.log('Query:', req.params.query);

  const result = db.searchUsers(req.params.query);
  res.json(result);
});

app.useRouter('/api/users', usersRouter);

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å cookies
app.get('/api/cookies', (req, res) => {
  console.log('=== GET /api/cookies ===');
  console.log('Cookies:', req.cookies);
  console.log('Headers:', req.headers);

  // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ö–µ–ª–ø–µ—Ä–æ–≤
  console.log('Session ID:', req.getCookie('sessionId'));
  console.log('Has theme cookie:', req.hasCookie('theme'));
  console.log('User-Agent header:', req.getHeader('user-agent'));
  console.log('Has Accept header:', req.hasHeader('accept'));

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ cookies –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ JSON
  const allCookies = req.getCookies();
  const allHeaders = req.getHeaders();
  console.log('All cookies (JSON):', allCookies);
  console.log('All headers (JSON):', allHeaders);

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ cookies –∏—Å–ø–æ–ª—å–∑—É—è setCookie
  res.setCookie('sessionId', 'abc123', {
    httpOnly: true,
    maxAge: 3600000, // 1 —á–∞—Å
    path: '/'
  });

  res.setCookie('theme', 'dark', {
    maxAge: 86400000, // 24 —á–∞—Å–∞
    path: '/'
  });

  res.setCookie('language', 'ru', {
    maxAge: 31536000000, // 1 –≥–æ–¥
    path: '/'
  });

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
  res.setHeader('X-Custom-Header', 'RNode-Server');
  res.setHeader('X-Response-Time', Date.now().toString());

  res.json({
    success: true,
    message: 'Cookies –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã',
    receivedCookies: req.cookies,
    receivedHeaders: req.headers,
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Ö–µ–ª–ø–µ—Ä–æ–≤
    cookieHelpers: {
      sessionId: req.getCookie('sessionId'),
      hasTheme: req.hasCookie('theme'),
      hasLanguage: req.hasCookie('language')
    },
    headerHelpers: {
      userAgent: req.getHeader('user-agent'),
      hasAccept: req.hasHeader('accept'),
      hasContentType: req.hasHeader('content-type')
    },
    // –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
    allCookies: allCookies,
    allHeaders: allHeaders
  });
});


// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è cookies
app.delete('/api/cookies/{name}', (req, res) => {
  console.log('=== DELETE /api/cookies/:name ===');
  console.log('Cookie name:', req.params.name);

  // –£–¥–∞–ª—è–µ–º cookie
  res.cookie(req.params.name, '', {
    maxAge: 0,
    path: '/'
  });

  res.json({
    success: true,
    message: `Cookie '${req.params.name}' —É–¥–∞–ª–µ–Ω`
  });
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ cookies
app.get('/api/cookies/info', (req, res) => {
  console.log('=== GET /api/cookies/info ===');

  // –ü–∞—Ä—Å–∏–º cookies —Å—Ç—Ä–æ–∫—É
  const cookiesStr = req.cookies || '';
  const cookies = {};

  if (cookiesStr) {
    cookiesStr.split(';').forEach(cookie => {
      const [name, value] = cookie.trim().split('=');
      if (name && value) {
        cookies[name] = value;
      }
    });
  }

  res.json({
    success: true,
    rawCookies: req.cookies,
    parsedCookies: cookies,
    cookieCount: Object.keys(cookies).length,
    headers: req.headers
  });
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö —Ö–µ–ª–ø–µ—Ä–æ–≤
app.get('/api/helpers', (req, res) => {
  console.log('=== GET /api/helpers ===');

  // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ —Ö–µ–ª–ø–µ—Ä—ã
  const cookieHelpers = {
    rawCookies: req.cookies,
    sessionId: req.getCookie('sessionId'),
    theme: req.getCookie('theme'),
    language: req.getCookie('language'),
    hasSessionId: req.hasCookie('sessionId'),
    hasTheme: req.hasCookie('theme'),
    hasLanguage: req.hasCookie('language'),
    hasNonExistent: req.hasCookie('nonExistent'),
    allCookies: req.getCookies() // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥
  };

  const headerHelpers = {
    rawHeaders: req.headers,
    userAgent: req.getHeader('user-agent'),
    accept: req.getHeader('accept'),
    contentType: req.getHeader('content-type'),
    hasUserAgent: req.hasHeader('user-agent'),
    hasAccept: req.hasHeader('accept'),
    hasContentType: req.hasHeader('content-type'),
    hasNonExistent: req.hasHeader('non-existent-header'),
    allHeaders: req.getHeaders() // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥
  };

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ cookies –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏
  res.setCookie('testCookie', 'testValue', { maxAge: 3600000 });
  res.setHeader('X-Test-Header', 'test-value');

  res.json({
    success: true,
    message: '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ö–µ–ª–ø–µ—Ä–æ–≤',
    cookieHelpers,
    headerHelpers,
    timestamp: new Date().toISOString()
  });
});

// CORS middleware —Ç–æ–ª—å–∫–æ –¥–ª—è API –º–∞—Ä—à—Ä—É—Ç–æ–≤
app.use('/api', (req, res, next) => {
  console.log('üåê CORS middleware –¥–ª—è API:', req.method, req.url);

  // –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ origins (–º–æ–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)
  res.setHeader('Access-Control-Allow-Origin', '*');

  // –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –º–µ—Ç–æ–¥—ã
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, PATCH, OPTIONS');

  // –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With, X-Custom-Header');

  // –†–∞–∑—Ä–µ—à–∞–µ–º credentials (cookies, authorization headers)
  res.setHeader('Access-Control-Allow-Credentials', 'true');

  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è preflight –∑–∞–ø—Ä–æ—Å–∞
  res.setHeader('Access-Control-Max-Age', '86400'); // 24 —á–∞—Å–∞

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Content-Type —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π –¥–ª—è –≤—Å–µ—Ö API –æ—Ç–≤–µ—Ç–æ–≤
  res.setHeader('Content-Type', 'application/json; charset=utf-8');

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  res.setHeader('X-Content-Type-Options', 'nosniff');
  res.setHeader('X-Frame-Options', 'DENY');
  res.setHeader('X-XSS-Protection', '1; mode=block');

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º preflight OPTIONS –∑–∞–ø—Ä–æ—Å—ã
  if (req.method === 'OPTIONS') {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π JSON –æ—Ç–≤–µ—Ç –≤–º–µ—Å—Ç–æ res.end()
    res.json({ success: true, message: 'Preflight OK' });
    return;
  }

  // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  next();
});

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ /api/auth/* (–∫—Ä–æ–º–µ login –∏ register)
app.use('/api/auth', (req, res, next) => {
  console.log('üîê Auth middleware –¥–ª—è:', req.method, req.url);

  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –ª–æ–≥–∏–Ω
  if (req.url === '/register' || req.url === '/login') {
    console.log('‚úÖ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º auth middleware –¥–ª—è:', req.url);
    return next();
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω (—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω—ã–º middleware)
  if (!req.getParam('isAuthenticated')) {
    console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
    return res.status(401).json({
      success: false,
      message: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.',
      error: 'Unauthorized'
    });
  }

  console.log('‚úÖ Auth middleware: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã–π middleware');
  console.log('üìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', req.getParams());

  next();
});

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏

// ===== –°–û–ó–î–ê–ù–ò–ï –†–û–£–¢–ï–†–ê –î–õ–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò =====

// –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
const authRouter = Router();

// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º, —á—Ç–æ Router –Ω–∞—Å–ª–µ–¥—É–µ—Ç –≤—Å–µ –º–µ—Ç–æ–¥—ã ExpressApp
console.log('üîß Router –º–µ—Ç–æ–¥—ã:', Object.getOwnPropertyNames(Object.getPrototypeOf(authRouter)));

// Middleware –¥–ª—è —Ä–æ—É—Ç–µ—Ä–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
authRouter.use((req, res, next) => {
  console.log('üîê Auth Router Middleware:', req.method, req.url);
  req.setParam('routerName', 'auth');
  next();
});

// POST /api/auth/register - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
authRouter.post('/register', (req, res) => {
  console.log('=== POST /api/auth/register ===');
  console.log('Body:', req.body);

  try {
    let userData = req.body;
    if (typeof req.body === 'string') {
      try {
        userData = JSON.parse(req.body);
      } catch (e) {
        return res.status(400).json({
          success: false,
          message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö'
        });
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (!userData.username || !userData.email || !userData.password) {
      return res.status(400).json({
        success: false,
        message: 'Username, email –∏ password –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
      });
    }

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ SQLite
    const registrationResult = authDb.registerUser(userData);

    if (!registrationResult.success) {
      return res.status(400).json(registrationResult);
    }

    // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const loginResult = authDb.loginUser(userData.email, userData.password);

    if (!loginResult.success) {
      return res.status(500).json({
        success: false,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è'
      });
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookies –¥–ª—è —Å–µ—Å—Å–∏–∏
    res.setCookie('sessionId', loginResult.sessionId, {
      httpOnly: true,
      maxAge: 86400000, // 24 —á–∞—Å–∞
      path: '/'
    });

    res.json({
      success: true,
      message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω',
      userId: loginResult.userId,
      sessionId: loginResult.sessionId,
      user: loginResult.user
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
      error: error.message
    });
  }
});

// POST /api/auth/login - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
authRouter.post('/login', (req, res) => {
  console.log('=== POST /api/auth/login ===');
  console.log('Body:', req.body);

  try {
    let loginData = req.body;
    if (typeof req.body === 'string') {
      try {
        loginData = JSON.parse(req.body);
      } catch (e) {
        return res.status(400).json({
          success: false,
          message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö'
        });
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (!loginData.email || !loginData.password) {
      return res.status(400).json({
        success: false,
        message: 'Email –∏ password –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
      });
    }

    // –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ SQLite
    const loginResult = authDb.loginUser(loginData.email, loginData.password);

    if (!loginResult.success) {
      return res.status(401).json(loginResult);
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookies –¥–ª—è —Å–µ—Å—Å–∏–∏
    res.setCookie('sessionId', loginResult.sessionId, {
      httpOnly: true,
      maxAge: 86400000, // 24 —á–∞—Å–∞
      path: '/'
    });

    res.json({
      success: true,
      message: loginResult.message,
      userId: loginResult.userId,
      sessionId: loginResult.sessionId,
      user: loginResult.user
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
      error: error.message
    });
  }
});

// POST /api/auth/logout - –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
authRouter.post('/logout', (req, res) => {
  console.log('=== POST /api/auth/logout ===');

  const sessionId = req.getCookie('sessionId');

  if (sessionId) {
    // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const logoutResult = authDb.logoutUser(sessionId);
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã:', logoutResult.message);
  }

  // –£–¥–∞–ª—è–µ–º cookies —Å–µ—Å—Å–∏–∏
  res.setCookie('sessionId', '', {
    maxAge: 0,
    path: '/'
  });

  res.json({
    success: true,
    message: '–£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã'
  });
});

// GET /api/auth/profile - –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞—â–∏—â–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç)
authRouter.get('/profile', (req, res) => {
  console.log('=== GET /api/auth/profile ===');

  // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤
  console.log('üìù –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ middleware:', req.getParams());
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:');
  console.log('  - userId:', req.hasParam('userId') ? '‚úÖ' : '‚ùå');
  console.log('  - user:', req.hasParam('user') ? '‚úÖ' : '‚ùå');
  console.log('  - isAuthenticated:', req.hasParam('isAuthenticated') ? '‚úÖ' : '‚ùå');
  console.log('  - nonExistent:', req.hasParam('nonExistent') ? '‚úÖ' : '‚ùå');

  // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã
  const userId = req.getParam('userId');
  const user = req.getParam('user');
  const isAuthenticated = req.getParam('isAuthenticated');

  console.log('üìä –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:');
  console.log('  - userId:', userId);
  console.log('  - user:', user);
  console.log('  - isAuthenticated:', isAuthenticated);

  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  const profileResult = authDb.getUserProfile(userId);

  if (!profileResult.success) {
    return res.status(404).json(profileResult);
  }

  // –≠—Ç–æ—Ç –º–∞—Ä—à—Ä—É—Ç –∑–∞—â–∏—â–µ–Ω middleware, –ø–æ—ç—Ç–æ–º—É –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã
  res.json({
    success: true,
    message: '–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    userId: userId,
    user: user,
    profile: profileResult.user,
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    allParams: req.getParams()
  });
});

// –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
authRouter.get('/test-params', (req, res) => {
  console.log('=== GET /api/auth/test-params ===');

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ
  req.setParam('handlerParam', 'value_from_handler');
  req.setParam('timestamp', Date.now());
  req.setParam('random', Math.random());

  console.log('üìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ:', req.getParams());

  // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
  res.json({
    success: true,
    message: '–¢–µ—Å—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤',
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ middleware
    globalParams: {
      isAuthenticated: req.getParam('isAuthenticated'),
      user: req.getParam('user'),
      userId: req.getParam('userId'),
      requestId: req.getParam('requestId'),
      timestamp: req.getParam('timestamp')
    },
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    handlerParams: {
      handlerParam: req.getParam('handlerParam'),
      timestamp: req.getParam('timestamp'),
      random: req.getParam('random')
    },
    // –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    allParams: req.getParams(),
    // –ü—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è
    checks: {
      hasUserId: req.hasParam('userId'),
      hasHandlerParam: req.hasParam('handlerParam'),
      hasNonExistent: req.hasParam('nonExistent'),
      hasIsAuthenticated: req.hasParam('isAuthenticated')
    }
  });
});


app.useRouter('/api/auth', authRouter);

// Graceful shutdown
process.on('SIGINT', () => {
  console.log('\nüîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...');
  db.close();
  authDb.close();
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(port, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
  console.log(`ÔøΩÔøΩ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite: users.db`);
  console.log(`üîó API endpoints:`);
  console.log(`   üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:`);
  console.log(`      POST   /api/users - —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`);
  console.log(`      GET    /api/users - –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
  console.log(`      GET    /api/users/{id} - –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID`);
  console.log(`      PUT    /api/users/{id} - –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`);
  console.log(`      DELETE /api/users/{id} - —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`);
  console.log(`      GET    /api/users/search/{query} - –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
  console.log(`   üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:`);
  console.log(`      POST   /api/auth/register - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è`);
  console.log(`      POST   /api/auth/login - –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É`);
  console.log(`      POST   /api/auth/logout - –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã`);
  console.log(`      GET    /api/auth/profile - –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`);
  console.log(`      GET    /api/auth/test-params - —Ç–µ—Å—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤`);
  console.log(`   üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:`);
  console.log(`      GET    / - –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞`);
  console.log(`      GET    /auth/ - —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏`);
  console.log(`   üîß –£—Ç–∏–ª–∏—Ç—ã:`);
  console.log(`      GET    /api/test - —Ç–µ—Å—Ç API`);
  console.log(`      GET    /api/cors-test - —Ç–µ—Å—Ç CORS`);
  console.log(`      GET    /api/cookies - —Ä–∞–±–æ—Ç–∞ —Å cookies`);
  console.log(`      GET    /api/helpers - –≤—Å–µ —Ö–µ–ª–ø–µ—Ä—ã`);
  console.log(`   üìä Middleware:`);
  console.log(`      –ì–ª–æ–±–∞–ª—å–Ω—ã–π middleware –¥–ª—è /*`);
  console.log(`      CORS –¥–ª—è /api/*`);
  console.log(`      Auth –¥–ª—è /api/auth/*`);
  console.log(`      –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è /*`);
  console.log(`   üöÄ –†–æ—É—Ç–µ—Ä—ã:`);
  console.log(`      /api/auth/* - —Ä–æ—É—Ç–µ—Ä –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏`);
  console.log(`      /api/users/* - —Ä–æ—É—Ç–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
});
