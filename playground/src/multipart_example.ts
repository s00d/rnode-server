import { createApp, UploadedFile, FileOperationResult, FileListResult, FileContentResult } from 'rnode-server';
import * as console from "node:console";

const app = createApp();

  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–¥–ø–∞–ø–∫–∏)
  app.download('/download/{*name}', {
    folder: './uploads',
    maxFileSize: 100 * 1024 * 1024, // 100 MB
    allowedExtensions: ['.png', '.jpg', '.jpeg', '.gif', '.pdf', '.txt', '.docx'],
    allowHiddenFiles: false,
    allowSystemFiles: false
  });

// –†–æ—É—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É
app.upload('/upload', {
  folder: './uploads',
  allowedSubfolders: ['documents/*', 'images/*', 'files/*'], // –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–¥–ø–∞–ø–∫–∏ —Å wildcard
  maxFileSize: 50 * 1024 * 1024, // 50 MB
  allowedExtensions: ['.png', '.jpg', '.jpeg', '.gif', '.pdf', '.txt', '.docx'],
  allowedMimeTypes: ['image/png', 'image/jpeg', 'image/gif', 'application/pdf', 'text/plain', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'],
  multiple: false,
  overwrite: true
});

// –†–æ—É—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –≤ –ª—é–±—É—é –ø–æ–¥–ø–∞–ø–∫—É (wildcard)
app.upload('/upload/{*subfolder}', {
  folder: './uploads',
  allowedSubfolders: ['*'], // –†–∞–∑—Ä–µ—à–∞–µ–º –ª—é–±—É—é –ø–æ–¥–ø–∞–ø–∫—É
  maxFileSize: 50 * 1024 * 1024, // 50 MB
  allowedExtensions: ['.png', '.jpg', '.jpeg', '.gif', '.pdf', '.txt', '.docx'],
  allowedMimeTypes: ['image/png', 'image/jpeg', 'image/gif', 'application/pdf', 'text/plain', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'],
  multiple: false,
  overwrite: true
});

// –†–æ—É—Ç –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É
app.upload('/upload-multiple', {
  folder: './uploads',
  allowedSubfolders: ['documents/*', 'images/*', 'files/*'], // –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–¥–ø–∞–ø–∫–∏ —Å wildcard
  maxFileSize: 50 * 1024 * 1024, // 50 MB
  allowedExtensions: ['.png', '.jpg', '.jpeg', '.gif'],
  allowedMimeTypes: ['image/png', 'image/jpeg', 'image/gif'],
  multiple: true,
  maxFiles: 10,
  overwrite: true
});

// –†–æ—É—Ç –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –≤ –ª—é–±—É—é –ø–æ–¥–ø–∞–ø–∫—É (wildcard)
app.upload('/upload-multiple/{*subfolder}', {
  folder: './uploads',
  allowedSubfolders: ['*'], // –†–∞–∑—Ä–µ—à–∞–µ–º –ª—é–±—É—é –ø–æ–¥–ø–∞–ø–∫—É
  maxFileSize: 50 * 1024 * 1024, // 50 MB
  allowedExtensions: ['.png', '.jpg', '.jpeg', '.gif'],
  allowedMimeTypes: ['image/png', 'image/jpeg', 'image/gif'],
  multiple: true,
  maxFiles: 10,
  overwrite: true
});

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
app.static('./upload-demo', {
  cache: true,
  maxAge: 3600,
  etag: true,
  lastModified: true,
  gzip: true,
  brotli: true
});

// –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (–ø—Ä–∏–º–µ—Ä)
app.static('./uploads', {
  cache: false, // –ù–µ –∫–µ—à–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
  maxAge: 0,
  maxFileSize: 50 * 1024 * 1024, // 50MB –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  allowHiddenFiles: false,
  allowedExtensions: ['jpg', 'png', 'gif', 'pdf', 'txt', 'docx'],
  blockedPaths: ['.git', '.env', 'node_modules']
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —Ñ–æ—Ä–º–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
app.get('/', (req, res) => {
  try {
    const path = require('path');
    const uploadsDir = path.join(__dirname, '../uploads');
    
    let filesList = '';
    let totalFiles = 0;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Rust –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å –ø–æ–¥–ø–∞–ø–∫–∞–º–∏
    try {
      const listResult = app.listFiles(uploadsDir);

      console.log(1111, JSON.stringify(listResult))
      
      if (listResult.success) {
        let allFiles = [];
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –ø–∞–ø–∫–∏
        if (listResult.files && listResult.files.length > 0) {
          allFiles.push(...listResult.files.map(file => {
            let folder = '–ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞';
            if (file.relative_path.includes('/')) {
              const pathParts = file.relative_path.split('/');
              if (pathParts.length >= 2) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "documents/2024/january")
                folder = pathParts.slice(0, -1).join('/');
              } else {
                folder = pathParts[0];
              }
            }
            return { ...file, folder };
          }));
        }
        
        if (allFiles.length > 0) {
          const files = allFiles.map((file) => {
            const fileSize = (file.size / 1024).toFixed(2); // KB
            const createdDate = new Date(parseInt(file.created)).toLocaleString('ru-RU');
            const modifiedDate = new Date(parseInt(file.modified)).toLocaleString('ru-RU');
            const folderInfo = file.folder !== '–ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞' ? `<span class="file-folder">üìÅ ${file.folder}</span>` : '';
            
            return `
              <div class="file-item">
                <div class="file-info">
                  <span class="file-name">${file.name}</span>
                  ${folderInfo}
                  <span class="file-size">${fileSize} KB</span>
                  <span class="file-date">–°–æ–∑–¥–∞–Ω: ${createdDate}</span>
                  <span class="file-date">–ò–∑–º–µ–Ω–µ–Ω: ${modifiedDate}</span>
                  <span class="file-mime">${file.mime_type}</span>
                </div>
                <div class="file-actions">
                  <a href="/download/${file.relative_path}" class="download-btn" download>üì• –°–∫–∞—á–∞—Ç—å</a>
                  <button class="delete-btn" onclick="deleteFile('${file.relative_path}')">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
                </div>
              </div>
            `;
          });
          
          totalFiles = allFiles.length;
          filesList = files.join('');
        }
      }
    } catch (rustError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ Rust:', rustError);
      // Fallback –∫ –ø—É—Å—Ç–æ–º—É —Å–ø–∏—Å–∫—É
    }
    
    res.html(`
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="UTF-8">
        <title>Multipart Upload Demo</title>
        <link rel="stylesheet" href="/styles.css">
      </head>
      <body>
        <div class="container">
          <h1>RNode Server - File Upload Demo</h1>
          
          <div class="upload-section">
            <h2>–ó–∞–≥—Ä—É–∑–∫–∞ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞</h2>
            <p class="upload-info">üí° –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è wildcard –ø—É—Ç—å –¥–ª—è –ª—É—á—à–µ–π SEO!</p>
            <form id="singleUpload" enctype="multipart/form-data">
              <input type="file" name="avatar" accept="image/*" required>
              <input type="text" name="description" placeholder="–û–ø–∏—Å–∞–Ω–∏–µ —Ñ–∞–π–ª–∞">
              <select id="singleSubfolder" required>
                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É</option>
                <option value="documents">üìÅ –î–æ–∫—É–º–µ–Ω—Ç—ã</option>
                <option value="documents/2024">üìÅ –î–æ–∫—É–º–µ–Ω—Ç—ã/2024</option>
                <option value="documents/2024/january">üìÅ –î–æ–∫—É–º–µ–Ω—Ç—ã/2024/–Ø–Ω–≤–∞—Ä—å</option>
                <option value="images">üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</option>
                <option value="images/thumbnails">üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è/–ú–∏–Ω–∏–∞—Ç—é—Ä—ã</option>
                <option value="files">üìÑ –§–∞–π–ª—ã</option>
                <option value="files/archives">üìÑ –§–∞–π–ª—ã/–ê—Ä—Ö–∏–≤—ã</option>
              </select>
              <button type="submit">–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª</button>
            </form>
          </div>
          
          <div class="upload-section">
            <h2>–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤</h2>
            <p class="upload-info">üí° –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è wildcard –ø—É—Ç—å –¥–ª—è –ª—É—á—à–µ–π SEO!</p>
            <form id="multipleUpload" enctype="multipart/form-data">
              <input type="file" name="documents" multiple accept=".pdf,.txt,.docx">
              <input type="text" name="category" placeholder="–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ñ–∞–π–ª–æ–≤">
              <select id="multipleSubfolder" required>
                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É</option>
                <option value="documents">üìÅ –î–æ–∫—É–º–µ–Ω—Ç—ã</option>
                <option value="documents/2024">üìÅ –î–æ–∫—É–º–µ–Ω—Ç—ã/2024</option>
                <option value="documents/2024/january">üìÅ –î–æ–∫—É–º–µ–Ω—Ç—ã/2024/–Ø–Ω–≤–∞—Ä—å</option>
                <option value="images">üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</option>
                <option value="images/thumbnails">üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è/–ú–∏–Ω–∏–∞—Ç—é—Ä—ã</option>
                <option value="files">üìÑ –§–∞–π–ª—ã</option>
                <option value="files/archives">üìÑ –§–∞–π–ª—ã/–ê—Ä—Ö–∏–≤—ã</option>
              </select>
              <button type="submit">–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã</button>
            </form>
          </div>
          
          <div class="files-section">
            <h2>–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (${totalFiles})</h2>
            ${totalFiles > 0 ? 
              `<div class="files-list">${filesList}</div>` : 
              '<p class="no-files">–§–∞–π–ª—ã –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã</p>'
            }
            <button onclick="refreshFiles()" class="refresh-btn">üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫</button>
          </div>
          
          <div id="results"></div>
        </div>
        
        <script src="/upload.js"></script>
        <script>
          function deleteFile(filepath) {
            if (confirm('–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª "' + filepath + '"?')) {
              // –ö–æ–¥–∏—Ä—É–µ–º –ø—É—Ç—å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –≤ URL
              const encodedPath = encodeURIComponent(filepath);
              fetch('/delete/' + encodedPath, { method: 'DELETE' })
                .then(response => response.json())
                .then(data => {
                  if (data.success) {
                    location.reload();
                  } else {
                    alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ' + data.error);
                  }
                })
                .catch(error => {
                  alert('–û—à–∏–±–∫–∞: ' + error);
                });
            }
          }
          
          function refreshFiles() {
            location.reload();
          }
        </script>
      </body>
      </html>
    `);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error);
    res.status(500).html('<h1>–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞</h1><p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É</p>');
  }
});

// API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–¥–ø–∞–ø–∫–∏)
app.delete('/delete/{*filepath}', (req, res) => {
  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑ URL –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º –µ–≥–æ
  let filepath = req.params.filepath;
  
  // –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL-encoded –ø–∞—Ä–∞–º–µ—Ç—Ä
  try {
    filepath = decodeURIComponent(filepath);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è URL:', error);
    return res.status(400).json({ 
      success: false, 
      error: 'Invalid URL encoding' 
    });
  }
  
  console.log(`üîç –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${filepath}`);
  
  const path = require('path');
  const uploadsDir = path.join(__dirname, '../uploads');
  
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Rust –º–µ—Ç–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    const deleteResult = app.deleteFile(filepath, uploadsDir);
    
    if (deleteResult.success) {
      console.log(`üóëÔ∏è –§–∞–π–ª —É–¥–∞–ª–µ–Ω —á–µ—Ä–µ–∑ Rust: ${filepath}`);
      res.json({ 
        success: true, 
        message: deleteResult.message 
      });
    } else {
      console.log(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ${filepath}`);
      res.status(404).json({ 
        success: false, 
        error: deleteResult.error 
      });
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${filepath}:`, error);
    res.status(500).json({ 
      success: false, 
      error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞' 
    });
  }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
app.get('/files', (req, res) => {
  try {
    const path = require('path');
    const uploadsDir = path.join(__dirname, '../uploads');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Rust –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
    const listResult = app.listFiles(uploadsDir);
    
    if (listResult.success) {
      res.json(listResult);
    } else {
      res.status(500).json({ 
        success: false, 
        error: listResult.error 
      });
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤:', error);
    res.status(500).json({ 
      success: false, 
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤' 
    });
  }
});

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
app.get('/demo/html', (req, res) => {
  res.html('<h1>HTML Response</h1><p>–≠—Ç–æ HTML –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞</p>');
});

app.get('/demo/text', (req, res) => {
  res.text('–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
});

app.get('/demo/xml', (req, res) => {
  res.xml('<?xml version="1.0"?><response><message>XML Response</message></response>');
});

app.get('/demo/redirect', (req, res) => {
  res.redirect('/', 301);
});

app.get('/demo/download', (req, res) => {
  // –ü—Ä–∏–º–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å)
  res.download('./upload-demo/sample.txt', 'downloaded_file.txt');
});

// API –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
app.get('/api/info', (req, res) => {
  res.json({
    server: 'RNode Server',
    version: '1.0.0',
    features: [
      'Multipart file upload',
      'Multiple file upload',
      'Base64 file encoding',
      'Various response types',
      'Static file serving'
    ],
    endpoints: {
      'POST /upload': 'Single file upload',
      'POST /upload-multiple': 'Multiple file upload',
      'GET /download/:filename': 'Download uploaded file',
      'DELETE /delete/:filename': 'Delete uploaded file',
      'GET /files': 'List uploaded files',
      'GET /demo/*': 'Response type demonstrations',
      'GET /api/info': 'This endpoint'
    }
  });
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
app.listen(4540, () => {
  console.log('üöÄ Multipart Demo Server running on port 4540');
  console.log('üìÅ File upload functionality enabled');
  console.log('üåê Open http://localhost:4540 to test file uploads');
  console.log('üìä API info: http://localhost:4540/api/info');
});
