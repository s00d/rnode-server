// RNode Server - Multipart Upload Demo JavaScript

document.addEventListener('DOMContentLoaded', function() {
  const resultsContainer = document.getElementById('results');
  
  // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–º–æ —Å—Å—ã–ª–∫–∏
  addDemoLinks();
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
  document.getElementById('singleUpload').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const formData = new FormData(this);
    const fileInput = this.querySelector('input[type="file"]');
    const subfolderSelect = document.getElementById('singleSubfolder');
    
    if (!fileInput.files.length) {
      showResult('error', '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª');
      return;
    }
    
    if (!subfolderSelect.value) {
      showResult('error', '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É');
      return;
    }
    
    showLoading('–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞...');
    
    try {
      // –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å wildcard –ø—É—Ç–µ–º –∏–ª–∏ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
      let uploadUrl;
      if (subfolderSelect.value) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º wildcard –ø—É—Ç—å –¥–ª—è –ª—É—á—à–µ–π SEO –∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        uploadUrl = `/upload/${subfolderSelect.value}`;
      } else {
        uploadUrl = '/upload';
      }
      console.log('üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É:', subfolderSelect.value, 'URL:', uploadUrl);
      
      const response = await fetch(uploadUrl, {
        method: 'POST',
        body: formData
      });
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      let result;
      try {
        result = await response.json();
      } catch (parseError) {
        throw new Error(`Failed to parse response: ${parseError.message}`);
      }
      
      console.log('üîç Upload response:', result); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
      console.log('üîç –¢–∏–ø result:', typeof result);
      console.log('üîç result.success:', result?.success);
      console.log('üîç result.uploadedFiles:', result?.uploadedFiles);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ result —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º
      if (!result || typeof result !== 'object') {
        throw new Error('Invalid response format');
      }
      
      if (result.success) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
        const uploadedFiles = result.uploadedFiles || [];
        const totalFiles = result.totalFiles || 0;
        const formFields = result.formFields || {};
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π
        window.lastUploadResult = result;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥–ø–∞–ø–∫—É –∏–∑ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏
        let subfolder = '–ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞';
        if (uploadedFiles.length > 0 && uploadedFiles[0].relative_path && uploadedFiles[0].relative_path.includes('/')) {
          const pathParts = uploadedFiles[0].relative_path.split('/');
          if (pathParts.length >= 2) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "documents/2024/january")
            subfolder = pathParts.slice(0, -1).join('/');
          } else {
            subfolder = pathParts[0];
          }
        }
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏
        let resultHtml = `
          <div class="result success">
            <h3>‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω</h3>
            <p><strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤:</strong> ${totalFiles}</p>
            <p><strong>–ü–æ–¥–ø–∞–ø–∫–∞:</strong> ${subfolder}</p>
            
            <h4>–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:</h4>
            <div class="uploaded-files">`;
        
        // –¶–∏–∫–ª –ø–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º
        uploadedFiles.forEach((file, index) => {
          resultHtml += `
            <div class="file-details">
              <p><strong>–§–∞–π–ª ${index + 1}:</strong></p>
              <ul>
                <li><strong>–ò–º—è:</strong> ${file.name || '–ë–µ–∑ –∏–º–µ–Ω–∏'}</li>
                <li><strong>–†–∞–∑–º–µ—Ä:</strong> ${formatFileSize(file.size || 0)}</li>
                <li><strong>MIME —Ç–∏–ø:</strong> ${file.mime_type || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</li>
                <li><strong>–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å:</strong> ${file.relative_path || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</li>
              </ul>
            </div>`;
        });
        
        resultHtml += `
            </div>
            
            <h4>–ü–æ–ª—è —Ñ–æ—Ä–º—ã:</h4>
            <div class="form-fields">`;
        
        // –¶–∏–∫–ª –ø–æ –ø–æ–ª—è–º —Ñ–æ—Ä–º—ã
        if (Object.keys(formFields).length > 0) {
          Object.entries(formFields).forEach(([key, value]) => {
            resultHtml += `<p><strong>${key}:</strong> ${value}</p>`;
          });
        } else {
          resultHtml += '<p>–ù–µ—Ç –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã</p>';
        }
        
        resultHtml += `
            </div>
          </div>`;
        
        resultsContainer.innerHTML = resultHtml;
      } else {
        showResult('error', result.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞');
      }
    } catch (error) {
      showResult('error', '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + error.message);
    }
    
    this.reset();
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
  document.getElementById('multipleUpload').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const formData = new FormData(this);
    const fileInput = this.querySelector('input[type="file"]');
    const subfolderSelect = document.getElementById('multipleSubfolder');
    
    if (!fileInput.files.length) {
      showResult('error', '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã');
      return;
    }
    
    if (!subfolderSelect.value) {
      showResult('error', '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É');
      return;
    }
    
    showLoading(`–ó–∞–≥—Ä—É–∑–∫–∞ ${fileInput.files.length} —Ñ–∞–π–ª–∞(–æ–≤)...`);
    
    try {
      // –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å wildcard –ø—É—Ç–µ–º –∏–ª–∏ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
      let uploadUrl;
      if (subfolderSelect.value) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º wildcard –ø—É—Ç—å –¥–ª—è –ª—É—á—à–µ–π SEO –∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        uploadUrl = `/upload-multiple/${subfolderSelect.value}`;
      } else {
        uploadUrl = '/upload-multiple';
      }
      console.log('üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É:', subfolderSelect.value, 'URL:', uploadUrl);
      
      const response = await fetch(uploadUrl, {
        method: 'POST',
        body: formData
      });
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      let result;
      try {
        result = await response.json();
      } catch (parseError) {
        throw new Error(`Failed to parse response: ${parseError.message}`);
      }
      
      console.log('Multiple upload response:', result); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ result —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º
      if (!result || typeof result !== 'object') {
        throw new Error('Invalid response format');
      }
      
      if (result.success) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
        const uploadedFiles = result.uploadedFiles || [];
        const totalFiles = result.totalFiles || 0;
        const formFields = result.formFields || {};
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π
        window.lastUploadResult = result;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥–ø–∞–ø–∫—É –∏–∑ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏
        let subfolder = '–ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞';
        if (uploadedFiles.length > 0 && uploadedFiles[0].relative_path && uploadedFiles[0].relative_path.includes('/')) {
          const pathParts = uploadedFiles[0].relative_path.split('/');
          if (pathParts.length >= 2) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "documents/2024/january")
            subfolder = pathParts.slice(0, -1).join('/');
          } else {
            subfolder = pathParts[0];
          }
        }
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏
        let resultHtml = `
          <div class="result success">
            <h3>‚úÖ –§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã</h3>
            <p><strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤:</strong> ${totalFiles}</p>
            <p><strong>–ü–æ–¥–ø–∞–ø–∫–∞:</strong> ${subfolder}</p>
            
            <h4>–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:</h4>
            <div class="uploaded-files">`;
        
        // –¶–∏–∫–ª –ø–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º
        uploadedFiles.forEach((file, index) => {
          resultHtml += `
            <div class="file-details">
              <p><strong>–§–∞–π–ª ${index + 1}:</strong></p>
              <ul>
                <li><strong>–ò–º—è:</strong> ${file.name || '–ë–µ–∑ –∏–º–µ–Ω–∏'}</li>
                <li><strong>–†–∞–∑–º–µ—Ä:</strong> ${formatFileSize(file.size || 0)}</li>
                <li><strong>MIME —Ç–∏–ø:</strong> ${file.mime_type || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</li>
                <li><strong>–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å:</strong> ${file.relative_path || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</li>
              </ul>
            </div>`;
        });
        
        resultHtml += `
            </div>
            
            <h4>–ü–æ–ª—è —Ñ–æ—Ä–º—ã:</h4>
            <div class="form-fields">`;
        
        // –¶–∏–∫–ª –ø–æ –ø–æ–ª—è–º —Ñ–æ—Ä–º—ã
        if (Object.keys(formFields).length > 0) {
          Object.entries(formFields).forEach(([key, value]) => {
            resultHtml += `<p><strong>${key}:</strong> ${value}</p>`;
          });
        } else {
          resultHtml += '<p>–ù–µ—Ç –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã</p>';
        }
        
        resultHtml += `
            </div>
          </div>`;
        
        resultsContainer.innerHTML = resultHtml;
      } else {
        showResult('error', result.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤');
      }
    } catch (error) {
      showResult('error', '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + error.message);
    }
    
    this.reset();
  });
  
  function showLoading(message) {
    resultsContainer.innerHTML = `
      <div class="result-item">
        <div class="loading"></div>
        ${message}
      </div>
    `;
  }
  
  function showResult(type, message, details = null) {
    let html = `
      <div class="result-item ${type}">
        <h3>${type === 'success' ? '‚úÖ' : '‚ùå'} ${message}</h3>
    `;
    
    if (details) {
      html += '<div class="file-info">';
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      for (const [key, value] of Object.entries(details)) {
        if (key !== '–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã' && key !== '–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤' && key !== 'MIME —Ç–∏–ø—ã') {
          html += `<div class="file-detail"><strong>${key}:</strong> ${value}</div>`;
        }
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö
      if (details['–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã'] && details['–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã'] !== '–ù–µ—Ç —Ñ–∞–π–ª–æ–≤') {
        html += '<div class="file-detail"><strong>–î–µ—Ç–∞–ª–∏ —Ñ–∞–π–ª–æ–≤:</strong></div>';
        
                 // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ñ–∞–π–ª–∞—Ö –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
         if (window.lastUploadResult && window.lastUploadResult.uploadedFiles) {
           window.lastUploadResult.uploadedFiles.forEach((file, index) => {
             const fileName = file.name || '–ë–µ–∑ –∏–º–µ–Ω–∏';
             const fileSize = file.size || 0;
             const fileMime = file.mime_type || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
             const filePath = file.relative_path || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
             
             html += `
               <div class="file-detail" style="margin-left: 20px; padding: 5px; background: #f5f5f5; border-radius: 3px; margin-bottom: 5px;">
                 <strong>–§–∞–π–ª ${index + 1}:</strong> ${fileName}<br>
                 <small>–†–∞–∑–º–µ—Ä: ${formatFileSize(fileSize)} | MIME: ${fileMime} | –ü—É—Ç—å: ${filePath}</small>
               </div>
             `;
           });
         }
      }
      
      html += '</div>';
    }
    
    html += '</div>';
    resultsContainer.innerHTML = html;
  }
  
  function formatFileSize(bytes) {
    console.log('üî¢ formatFileSize –≤—ã–∑–≤–∞–Ω–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º:', bytes);
    console.log('üî¢ –¢–∏–ø bytes:', typeof bytes);
    
    if (bytes === 0) return '0 Bytes';
    
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    
    const result = parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    console.log('üî¢ –†–µ–∑—É–ª—å—Ç–∞—Ç formatFileSize:', result);
    return result;
  }
  
  function addDemoLinks() {
    const demoLinksHtml = `
      <div class="demo-links">
        <h3>üîç –î–µ–º–æ —Ñ—É–Ω–∫—Ü–∏–π RNode Server</h3>
        <a href="/demo/html" target="_blank">HTML Response</a>
        <a href="/demo/text" target="_blank">Text Response</a>
        <a href="/demo/xml" target="_blank">XML Response</a>
        <a href="/demo/redirect" target="_blank">Redirect Test</a>
        <a href="/demo/download" target="_blank">Download File</a>
        <a href="/api/info" target="_blank">API Info</a>
      </div>
    `;
    
    resultsContainer.insertAdjacentHTML('afterend', demoLinksHtml);
  }
});
