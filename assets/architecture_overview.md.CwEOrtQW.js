import{_ as c,C as u,c as g,o as r,a2 as o,b as n,j as d,w as t,a,G as i,a3 as l}from"./chunks/framework.DCouvwsE.js";const E=JSON.parse('{"title":"Architecture Overview","description":"","frontmatter":{},"headers":[],"relativePath":"architecture/overview.md","filePath":"architecture/overview.md","lastUpdated":1756472367000}'),m={name:"architecture/overview.md"};function h(p,e,A,f,b,v){const s=u("Mermaid");return r(),g("div",null,[e[3]||(e[3]=o('<h1 id="architecture-overview" tabindex="-1">Architecture Overview <a class="header-anchor" href="#architecture-overview" aria-label="Permalink to &quot;Architecture Overview&quot;">​</a></h1><h2 id="system-architecture" tabindex="-1">System Architecture <a class="header-anchor" href="#system-architecture" aria-label="Permalink to &quot;System Architecture&quot;">​</a></h2><p>RNode Server uses a <strong>unique hybrid approach</strong> where <strong>all JavaScript code execution happens through Rust backend</strong>. This architecture provides both advantages and challenges.</p><h2 id="request-flow" tabindex="-1">Request Flow <a class="header-anchor" href="#request-flow" aria-label="Permalink to &quot;Request Flow&quot;">​</a></h2>',4)),(r(),n(l,null,{default:t(()=>[i(s,{id:"mermaid-12",class:"mermaid my-class",graph:"sequenceDiagram%0A%20%20%20%20participant%20Client%0A%20%20%20%20participant%20RustBackend%20as%20Rust%20Backend%20(Axum)%0A%20%20%20%20participant%20NodeJS%20as%20Node.js%20(Neon%20FFI)%0A%20%20%20%20participant%20JSHandlers%20as%20JavaScript%20Handlers%0A%0A%20%20%20%20Client-%3E%3ERustBackend%3A%20HTTP%20Request%0A%20%20%20%20Note%20over%20RustBackend%3A%20Parse%20headers%2C%20body%2C%20query%20params%0A%20%20%20%20%0A%20%20%20%20RustBackend-%3E%3ENodeJS%3A%20Execute%20JavaScript%0A%20%20%20%20Note%20over%20NodeJS%3A%20Route%20to%20appropriate%20handler%0A%20%20%20%20%0A%20%20%20%20NodeJS-%3E%3EJSHandlers%3A%20Run%20middleware%20%26%20handlers%0A%20%20%20%20Note%20over%20JSHandlers%3A%20Process%20request%2C%20generate%20response%0A%20%20%20%20%0A%20%20%20%20JSHandlers--%3E%3ENodeJS%3A%20Response%20data%0A%20%20%20%20NodeJS--%3E%3ERustBackend%3A%20Serialized%20response%0A%20%20%20%20%0A%20%20%20%20Note%20over%20RustBackend%3A%20Format%20HTTP%20response%0A%20%20%20%20RustBackend--%3E%3EClient%3A%20HTTP%20Response%0A"})]),fallback:t(()=>[...e[0]||(e[0]=[a(" Loading... ",-1)])]),_:1})),e[4]||(e[4]=d("h2",{id:"data-flow",tabindex:"-1"},[a("Data Flow "),d("a",{class:"header-anchor",href:"#data-flow","aria-label":'Permalink to "Data Flow"'},"​")],-1)),(r(),n(l,null,{default:t(()=>[i(s,{id:"mermaid-16",class:"mermaid my-class",graph:"flowchart%20TD%0A%20%20%20%20A%5BClient%20Request%5D%20--%3E%20B%5BRust%20Backend%5D%0A%20%20%20%20B%20--%3E%20C%7BParse%20Request%7D%0A%20%20%20%20C%20--%3E%20D%5BRoute%20to%20Handler%5D%0A%20%20%20%20D%20--%3E%20E%5BExecute%20JavaScript%5D%0A%20%20%20%20E%20--%3E%20F%5BProcess%20Middleware%5D%0A%20%20%20%20F%20--%3E%20G%5BRun%20Route%20Handler%5D%0A%20%20%20%20G%20--%3E%20H%5BGenerate%20Response%5D%0A%20%20%20%20H%20--%3E%20I%5BSerialize%20Data%5D%0A%20%20%20%20I%20--%3E%20J%5BRust%20Response%5D%0A%20%20%20%20J%20--%3E%20K%5BSend%20to%20Client%5D%0A%20%20%20%20%0A%20%20%20%20style%20B%20fill%3A%23ff6b6b%0A%20%20%20%20style%20E%20fill%3A%234ecdc4%0A%20%20%20%20style%20J%20fill%3A%2345b7d1%0A"})]),fallback:t(()=>[...e[1]||(e[1]=[a(" Loading... ",-1)])]),_:1})),e[5]||(e[5]=o('<h2 id="core-components" tabindex="-1">Core Components <a class="header-anchor" href="#core-components" aria-label="Permalink to &quot;Core Components&quot;">​</a></h2><h3 id="rust-backend-axum" tabindex="-1">Rust Backend (Axum) <a class="header-anchor" href="#rust-backend-axum" aria-label="Permalink to &quot;Rust Backend (Axum)&quot;">​</a></h3><ul><li><strong>HTTP Server</strong>: Handles all incoming HTTP requests</li><li><strong>Request Parsing</strong>: Parses headers, body, and query parameters</li><li><strong>Routing</strong>: Determines which JavaScript handler to execute</li><li><strong>Response Generation</strong>: Formats and sends HTTP responses</li></ul><h3 id="node-js-integration-neon-ffi" tabindex="-1">Node.js Integration (Neon FFI) <a class="header-anchor" href="#node-js-integration-neon-ffi" aria-label="Permalink to &quot;Node.js Integration (Neon FFI)&quot;">​</a></h3><ul><li><strong>JavaScript Execution</strong>: Runs your Express-like code</li><li><strong>Data Serialization</strong>: Converts between Rust and JavaScript data types</li><li><strong>Middleware Chain</strong>: Executes middleware and route handlers</li><li><strong>Response Processing</strong>: Handles JSON, files, and custom responses</li></ul><h3 id="communication-layer" tabindex="-1">Communication Layer <a class="header-anchor" href="#communication-layer" aria-label="Permalink to &quot;Communication Layer&quot;">​</a></h3><ul><li><strong>Zero-Copy</strong>: Minimizes data copying between layers</li><li><strong>Type Safety</strong>: Maintains type safety across language boundaries</li><li><strong>Error Handling</strong>: Graceful error propagation between layers</li></ul><h2 id="promise-management-system" tabindex="-1">Promise Management System <a class="header-anchor" href="#promise-management-system" aria-label="Permalink to &quot;Promise Management System&quot;">​</a></h2><p>RNode Server implements a <strong>revolutionary promise management system</strong> that eliminates polling and provides instant notification when promises complete.</p><h3 id="how-it-works" tabindex="-1">How It Works <a class="header-anchor" href="#how-it-works" aria-label="Permalink to &quot;How It Works&quot;">​</a></h3>',10)),(r(),n(l,null,{default:t(()=>[i(s,{id:"mermaid-99",class:"mermaid my-class",graph:"sequenceDiagram%0A%20%20%20%20participant%20Client%0A%20%20%20%20participant%20Rust%20as%20Rust%20Handler%0A%20%20%20%20participant%20JS%20as%20JavaScript%20Handler%0A%0A%20%20%20%20Client-%3E%3ERust%3A%20HTTP%20Request%0A%20%20%20%20Rust-%3E%3EJS%3A%20Execute%20Handler%20with%20timeout%0A%20%20%20%20JS-%3E%3EJS%3A%20Create%20AbortController%20%2B%20setTimeout%0A%20%20%20%20%0A%20%20%20%20alt%20Success%0A%20%20%20%20%20%20%20%20JS-%3E%3EJS%3A%20Promise%20resolves%20before%20timeout%0A%20%20%20%20%20%20%20%20JS-%3E%3ERust%3A%20Return%20JSON%20with%20status%3A%20200%0A%20%20%20%20%20%20%20%20Rust--%3E%3EClient%3A%20HTTP%20Response%20with%20result%0A%20%20%20%20else%20Timeout%0A%20%20%20%20%20%20%20%20JS-%3E%3EJS%3A%20setTimeout%20triggers%20abort()%0A%20%20%20%20%20%20%20%20JS-%3E%3ERust%3A%20Return%20JSON%20with%20status%3A%20408%0A%20%20%20%20%20%20%20%20Rust-%3E%3ERust%3A%20Generate%20HTML%20error%20page%0A%20%20%20%20%20%20%20%20Rust--%3E%3EClient%3A%20Beautiful%20timeout%20error%20page%0A%20%20%20%20else%20Error%0A%20%20%20%20%20%20%20%20JS-%3E%3EJS%3A%20Promise%20rejects%0A%20%20%20%20%20%20%20%20JS-%3E%3ERust%3A%20Return%20JSON%20with%20status%3A%20500%0A%20%20%20%20%20%20%20%20Rust-%3E%3ERust%3A%20Generate%20HTML%20error%20page%0A%20%20%20%20%20%20%20%20Rust--%3E%3EClient%3A%20Beautiful%20error%20page%0A%20%20%20%20end%0A"})]),fallback:t(()=>[...e[2]||(e[2]=[a(" Loading... ",-1)])]),_:1})),e[6]||(e[6]=o('<h3 id="key-features" tabindex="-1">Key Features <a class="header-anchor" href="#key-features" aria-label="Permalink to &quot;Key Features&quot;">​</a></h3><ul><li><strong>🚀 Direct Promise Handling</strong>: JavaScript promises are awaited directly in Rust using Neon FFI</li><li><strong>⏱️ Built-in Timeout</strong>: AbortController automatically cancels operations when timeout is reached</li><li><strong>🔒 Status-based Errors</strong>: All errors return proper HTTP status codes (4xx, 5xx)</li><li><strong>🎨 Auto Error Pages</strong>: Rust generates beautiful HTML error pages for error statuses</li><li><strong>🧹 Memory Safe</strong>: Automatic cleanup of timers and abort signals</li></ul><h2 id="advantages" tabindex="-1">Advantages <a class="header-anchor" href="#advantages" aria-label="Permalink to &quot;Advantages&quot;">​</a></h2><ul><li><strong>🚀 Performance</strong>: Rust handles HTTP parsing, routing, and response generation at native speed</li><li><strong>🔒 Security</strong>: Rust&#39;s memory safety prevents common server vulnerabilities</li><li><strong>⚡ Efficiency</strong>: Minimal overhead between HTTP layer and JavaScript execution</li><li><strong>🔄 Control</strong>: Full control over request/response lifecycle</li><li><strong>🧩 Flexibility</strong>: Can implement custom optimizations at any layer</li><li><strong>⚡ Revolutionary Promise System</strong>: No more polling - instant notification when promises complete</li><li><strong>🧠 Smart State Management</strong>: Uses Rust&#39;s conditional variables for efficient waiting</li><li><strong>💾 Zero Memory Leaks</strong>: Automatic promise cleanup from both Rust and JavaScript sides</li></ul><h2 id="challenges-considerations" tabindex="-1">Challenges &amp; Considerations <a class="header-anchor" href="#challenges-considerations" aria-label="Permalink to &quot;Challenges &amp; Considerations&quot;">​</a></h2><ul><li><strong>🔄 Complexity</strong>: JavaScript execution requires FFI (Foreign Function Interface) calls</li><li><strong>📊 Memory</strong>: Data serialization between Rust and JavaScript layers</li><li><strong>🔧 Debugging</strong>: More complex debugging across language boundaries</li><li><strong>📚 Learning Curve</strong>: Requires understanding of both Rust and Node.js ecosystems</li></ul><h2 id="what-this-enables" tabindex="-1">What This Enables <a class="header-anchor" href="#what-this-enables" aria-label="Permalink to &quot;What This Enables&quot;">​</a></h2><ul><li><strong>🚀 Custom HTTP Optimizations</strong>: Implement protocol-level improvements</li><li><strong>🔒 Advanced Security</strong>: Rust-level security checks before JavaScript execution</li><li><strong>⚡ Performance Monitoring</strong>: Detailed metrics at every layer</li><li><strong>🧩 Protocol Extensions</strong>: Custom HTTP methods, headers, and behaviors</li><li><strong>🔄 Real-time Processing</strong>: Low-latency data transformation between layers</li></ul><h2 id="performance-characteristics" tabindex="-1">Performance Characteristics <a class="header-anchor" href="#performance-characteristics" aria-label="Permalink to &quot;Performance Characteristics&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Metric</th><th>Express</th><th>RNode Server</th><th>Improvement</th></tr></thead><tbody><tr><td><strong>Requests/sec (RPS)</strong></td><td>9,315</td><td>25,378</td><td><strong>~2.7× faster</strong></td></tr><tr><td><strong>Average time/request</strong></td><td>10.7 ms</td><td>3.9 ms</td><td><strong>~2.7× faster</strong></td></tr><tr><td><strong>Transfer rate</strong></td><td>3.3 MB/s</td><td>6.6 MB/s</td><td><strong>~2× higher</strong></td></tr><tr><td><strong>Memory usage</strong></td><td>Higher</td><td>Lower</td><td><strong>More efficient</strong></td></tr><tr><td><strong>CPU usage</strong></td><td>Higher</td><td>Lower</td><td><strong>More efficient</strong></td></tr></tbody></table><h2 id="use-cases" tabindex="-1">Use Cases <a class="header-anchor" href="#use-cases" aria-label="Permalink to &quot;Use Cases&quot;">​</a></h2><h3 id="high-performance-apis" tabindex="-1">High-Performance APIs <a class="header-anchor" href="#high-performance-apis" aria-label="Permalink to &quot;High-Performance APIs&quot;">​</a></h3><ul><li><strong>Microservices</strong>: Fast request processing with minimal latency</li><li><strong>Real-time Applications</strong>: Low-latency data processing</li><li><strong>High-Traffic Websites</strong>: Efficient handling of concurrent requests</li></ul><h3 id="security-critical-applications" tabindex="-1">Security-Critical Applications <a class="header-anchor" href="#security-critical-applications" aria-label="Permalink to &quot;Security-Critical Applications&quot;">​</a></h3><ul><li><strong>Financial Services</strong>: Rust-level security guarantees</li><li><strong>Healthcare</strong>: Memory-safe request processing</li><li><strong>Government</strong>: Secure data handling</li></ul><h3 id="resource-constrained-environments" tabindex="-1">Resource-Constrained Environments <a class="header-anchor" href="#resource-constrained-environments" aria-label="Permalink to &quot;Resource-Constrained Environments&quot;">​</a></h3><ul><li><strong>Edge Computing</strong>: Efficient resource usage</li><li><strong>IoT Applications</strong>: Low memory footprint</li><li><strong>Cloud Services</strong>: Cost-effective scaling</li></ul>',17))])}const y=c(m,[["render",h]]);export{E as __pageData,y as default};
