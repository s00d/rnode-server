import{_ as h,C as n,c as o,o as p,a2 as r,G as e,w as a,j as s}from"./chunks/framework.DCouvwsE.js";const F=JSON.parse('{"title":"RNode Server","description":"","frontmatter":{"layout":"home","hero":{"name":"RNode Server","text":"High-performance Node.js server built with Rust","tagline":"Express-like API with advanced middleware support, featuring revolutionary promise management and zero CPU waste.","actions":[{"theme":"brand","text":"🚀 Get Started","link":"/guide/"},{"theme":"alt","text":"⭐ View on GitHub","link":"https://github.com/s00d/rnode-server"}]},"features":[{"title":"⚡ High Performance","details":"🚀 Built with Rust backend for native speed, achieving ~2.7× faster request processing compared to Express.js."},{"title":"🔄 Revolutionary Promise System","details":"🧠 JavaScript promises awaited directly in Rust with zero CPU waste, instant notification, and built-in timeouts."},{"title":"🎯 Express-like API","details":"🛠️ Familiar routing and middleware patterns, making it easy to migrate from Express.js applications."},{"title":"🎨 Template Engine","details":"🔧 Integrated Tera template engine for server-side HTML rendering with inheritance and macros."},{"title":"📁 Advanced File Operations","details":"📤 Comprehensive file upload, download, and management with security options and wildcard support."},{"title":"📊 Built-in Monitoring","details":"📈 Prometheus metrics, Grafana dashboards, and performance monitoring out of the box."}]},"headers":[],"relativePath":"index.md","filePath":"index.md","lastUpdated":1756473641000}'),d={name:"index.md"};function k(g,i,c,u,E,m){const t=n("PluginTabsTab"),l=n("PluginTabs");return p(),o("div",null,[i[3]||(i[3]=r('<h1 id="rnode-server" tabindex="-1">RNode Server <a class="header-anchor" href="#rnode-server" aria-label="Permalink to &quot;RNode Server&quot;">​</a></h1><blockquote><p><strong>🚀 Experimental Project</strong>: High-performance Node.js server built with Rust, featuring Express-like API with advanced middleware support.</p></blockquote><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>RNode Server is a <strong>full-featured server implementation</strong> built from the ground up with Rust and Node.js bindings. The goal is to create a production-ready server with all the necessary configurations for fast deployment and optimal performance.</p><h2 id="key-features" tabindex="-1">Key Features <a class="header-anchor" href="#key-features" aria-label="Permalink to &quot;Key Features&quot;">​</a></h2><ul><li>🚀 <strong>High Performance</strong> - Built with Rust and Node.js</li><li>🔧 <strong>Express-like API</strong> - Familiar routing and middleware</li><li>📁 <strong>Static File Serving</strong> - With compression and caching</li><li>📤 <strong>File Upload</strong> - Multipart form data support</li><li>📥 <strong>File Download</strong> - Secure file serving</li><li>🎨 <strong>Template Engine</strong> - Tera templates with inheritance</li><li>🔒 <strong>HTTPS Support</strong> - SSL/TLS encryption with certificate support</li><li>🌐 <strong>IP Detection</strong> - Client IP from various proxy headers</li><li>🔌 <strong>Express Middleware</strong> - Use existing Express plugins</li></ul><h2 id="performance" tabindex="-1">Performance <a class="header-anchor" href="#performance" aria-label="Permalink to &quot;Performance&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Metric</th><th>Express</th><th>RNode Server</th><th>Difference</th></tr></thead><tbody><tr><td><strong>Requests/sec (RPS)</strong></td><td>9,315</td><td>25,378</td><td><strong>~2.7× faster</strong></td></tr><tr><td><strong>Average time/request</strong></td><td>10.7 ms</td><td>3.9 ms</td><td><strong>~2.7× faster</strong></td></tr><tr><td><strong>Transfer rate</strong></td><td>3.3 MB/s</td><td>6.6 MB/s</td><td><strong>~2× higher</strong></td></tr></tbody></table><h2 id="quick-start" tabindex="-1">Quick Start <a class="header-anchor" href="#quick-start" aria-label="Permalink to &quot;Quick Start&quot;">​</a></h2><h3 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-label="Permalink to &quot;Installation&quot;">​</a></h3>',10)),e(l,null,{default:a(()=>[e(t,{label:"npm"},{default:a(()=>[...i[0]||(i[0]=[s("div",{class:"language-bash vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"bash"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"npm"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," install"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," rnode-server")])])])],-1)])]),_:1}),e(t,{label:"pnpm"},{default:a(()=>[...i[1]||(i[1]=[s("div",{class:"language-bash vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"bash"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"pnpm"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," add"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," rnode-server")])])])],-1)])]),_:1}),e(t,{label:"yarn"},{default:a(()=>[...i[2]||(i[2]=[s("div",{class:"language-bash vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"bash"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"yarn"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," add"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," rnode-server")])])])],-1)])]),_:1})]),_:1}),i[4]||(i[4]=r(`<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { createApp } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;rnode-server&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> app</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> port</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ message: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello World!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(port, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`🚀 Server started on port \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">port</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="architecture" tabindex="-1">Architecture <a class="header-anchor" href="#architecture" aria-label="Permalink to &quot;Architecture&quot;">​</a></h2><p>RNode Server uses a <strong>unique hybrid approach</strong> where <strong>all JavaScript code execution happens through Rust backend</strong>. This architecture provides:</p><ul><li><strong>🚀 Performance</strong>: Rust handles HTTP parsing, routing, and response generation at native speed</li><li><strong>🔒 Security</strong>: Rust&#39;s memory safety prevents common server vulnerabilities</li><li><strong>⚡ Efficiency</strong>: Minimal overhead between HTTP layer and JavaScript execution</li><li><strong>🔄 Revolutionary Promise System</strong>: No more polling - instant notification when promises complete</li></ul><h2 id="get-started" tabindex="-1">Get Started <a class="header-anchor" href="#get-started" aria-label="Permalink to &quot;Get Started&quot;">​</a></h2><ul><li><a href="./guide/installation">Installation</a> - Get RNode Server up and running</li><li><a href="./guide/quick-start">Quick Start</a> - Your first server in minutes</li><li><a href="./examples/">Examples</a> - Real-world examples and use cases</li><li><a href="./api/">API Reference</a> - Complete API documentation</li></ul>`,6))])}const v=h(d,[["render",k]]);export{F as __pageData,v as default};
