import{_ as a,c as r,o as i,a2 as t}from"./chunks/framework.DCouvwsE.js";const m=JSON.parse('{"title":"Architecture","description":"","frontmatter":{},"headers":[],"relativePath":"architecture/index.md","filePath":"architecture/index.md","lastUpdated":1756472367000}'),s={name:"architecture/index.md"};function o(n,e,l,c,h,u){return i(),r("div",null,[...e[0]||(e[0]=[t('<h1 id="architecture" tabindex="-1">Architecture <a class="header-anchor" href="#architecture" aria-label="Permalink to &quot;Architecture&quot;">​</a></h1><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>RNode Server uses a <strong>unique hybrid approach</strong> where <strong>all JavaScript code execution happens through Rust backend</strong>. This architecture provides both advantages and challenges.</p><h2 id="key-components" tabindex="-1">Key Components <a class="header-anchor" href="#key-components" aria-label="Permalink to &quot;Key Components&quot;">​</a></h2><ul><li><strong><a href="./overview">Overview</a></strong> - Complete system architecture and design</li></ul><h2 id="architecture-highlights" tabindex="-1">Architecture Highlights <a class="header-anchor" href="#architecture-highlights" aria-label="Permalink to &quot;Architecture Highlights&quot;">​</a></h2><h3 id="hybrid-rust-node-js" tabindex="-1">Hybrid Rust + Node.js <a class="header-anchor" href="#hybrid-rust-node-js" aria-label="Permalink to &quot;Hybrid Rust + Node.js&quot;">​</a></h3><ul><li><strong>Rust Backend</strong>: High-performance HTTP server with Axum</li><li><strong>Node.js Integration</strong>: JavaScript execution through Neon FFI</li><li><strong>Zero-Copy Communication</strong>: Minimal data copying between layers</li></ul><h3 id="revolutionary-promise-system" tabindex="-1">Revolutionary Promise System <a class="header-anchor" href="#revolutionary-promise-system" aria-label="Permalink to &quot;Revolutionary Promise System&quot;">​</a></h3><ul><li><strong>Direct Promise Handling</strong>: JavaScript promises awaited directly in Rust</li><li><strong>Built-in Timeout</strong>: Automatic operation cancellation</li><li><strong>Status-based Errors</strong>: Proper HTTP status codes for all errors</li><li><strong>Auto Error Pages</strong>: Beautiful HTML error pages generated by Rust</li></ul><h3 id="performance-characteristics" tabindex="-1">Performance Characteristics <a class="header-anchor" href="#performance-characteristics" aria-label="Permalink to &quot;Performance Characteristics&quot;">​</a></h3><ul><li><strong>~2.7× faster</strong> than Express.js</li><li><strong>~2.7× lower</strong> average response time</li><li><strong>~2× higher</strong> transfer rates</li><li><strong>More efficient</strong> memory and CPU usage</li></ul><h2 id="use-cases" tabindex="-1">Use Cases <a class="header-anchor" href="#use-cases" aria-label="Permalink to &quot;Use Cases&quot;">​</a></h2><h3 id="high-performance-apis" tabindex="-1">High-Performance APIs <a class="header-anchor" href="#high-performance-apis" aria-label="Permalink to &quot;High-Performance APIs&quot;">​</a></h3><ul><li>Microservices with minimal latency</li><li>Real-time applications</li><li>High-traffic websites</li></ul><h3 id="security-critical-applications" tabindex="-1">Security-Critical Applications <a class="header-anchor" href="#security-critical-applications" aria-label="Permalink to &quot;Security-Critical Applications&quot;">​</a></h3><ul><li>Financial services</li><li>Healthcare systems</li><li>Government applications</li></ul><h3 id="resource-constrained-environments" tabindex="-1">Resource-Constrained Environments <a class="header-anchor" href="#resource-constrained-environments" aria-label="Permalink to &quot;Resource-Constrained Environments&quot;">​</a></h3><ul><li>Edge computing</li><li>IoT applications</li><li>Cloud services</li></ul><h2 id="next-steps" tabindex="-1">Next Steps <a class="header-anchor" href="#next-steps" aria-label="Permalink to &quot;Next Steps&quot;">​</a></h2><ul><li><a href="./../api/">API Reference</a> - Complete API documentation</li><li><a href="./../examples/">Examples</a> - Practical usage examples</li><li><a href="./../monitoring/">Monitoring</a> - Metrics and performance</li></ul>',21)])])}const p=a(s,[["render",o]]);export{m as __pageData,p as default};
